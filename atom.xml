<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko"><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://shlrur.github.io//atom.xml" rel="self" type="application/atom+xml" /><link href="https://shlrur.github.io//" rel="alternate" type="text/html" hreflang="ko" /><updated>2019-02-15T07:14:09+00:00</updated><id>https://shlrur.github.io//atom.xml</id><title type="html">First Blog</title><subtitle>A blog about study log.</subtitle><author><name>Heekyum</name></author><entry><title type="html">Web에서의 Rendering</title><link href="https://shlrur.github.io//develog/2019/02/14/rendering-on-the-web/" rel="alternate" type="text/html" title="Web에서의 Rendering" /><published>2019-02-14T00:00:00+00:00</published><updated>2019-02-14T00:00:00+00:00</updated><id>https://shlrur.github.io//develog/2019/02/14/rendering-on-the-web</id><content type="html" xml:base="https://shlrur.github.io//develog/2019/02/14/rendering-on-the-web/">&lt;p&gt;개인 프로젝트를 진행하면서 계속해서 고민하고 있는 부분이 있습니다. 바로 SAP와 SSR인데요, 현재 사이트는 SAP로 구현하고 있습니다. 하지만 사이트가 검색엔진에서 검색되어져야 한다거나, 굳히 single page로 구현하지 않아도 되는 page 등의 이유로 부분적인 server side rendering도 고려하고 있습니다.&lt;/p&gt;

&lt;p&gt;사이트가 부분적으로 완성 된 후에는 개선사항으로 SSR을 적용 할 생각입니다. 하지만 해당 기술을 적용하기 위해서는 좀더 잘 알 필요가 있기 때문에 이번 포스트를 작성하게 되었습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이 포스트는 &lt;a href=&quot;https://developers.google.com/web/updates/2019/02/rendering-on-the-web&quot;&gt;Rendering on the Web&lt;/a&gt; 의 글을 번역한 것입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;contents&quot;&gt;Contents&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#motivation&quot;&gt;Motivation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#terminology&quot;&gt;Terminology&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#Server Rendering&quot;&gt;Server Rendering&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#Static Rednering&quot;&gt;Static Rednering&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#Server Rendering vs Static Rendering&quot;&gt;Server Rendering vs Static Rendering&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#Client-Side Rendering(CSR)&quot;&gt;Client-Side Rendering(CSR)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#Combining serverrendering and CSR via rehydration&quot;&gt;Combining serverrendering and CSR via rehydration&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#A Rehydration Problem: One App for the Price of Two&quot;&gt;A Rehydration Problem: One App for the Price of Two&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#Streaming server rendering and Progressive Rehydration&quot;&gt;Streaming server rendering and Progressive Rehydration&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#Partial Rehydration&quot;&gt;Partial Rehydration&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#Trisomorphic Rendering&quot;&gt;Trisomorphic Rendering&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#SEO Considerations&quot;&gt;SEO Considerations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#Wrapping up...&quot;&gt;Wrapping up…&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#references&quot;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;motivation&quot;&gt;Motivation&lt;/h1&gt;

&lt;p&gt;우리는 가끔 개발자로서, application의 전체적인 구조에 영향을 미치는 사항에 대한 결정을 해야 할 때가 있습니다. 웹 개발자에게는 &lt;strong&gt;logic과 rendering을 application의 어디에서 구현할 것인지에 대한 결정&lt;/strong&gt;이 바로 그런 것입니다. 웹 사이트를 만드는데 수 많은 방법이 있기 때문에, 어려운 결정이라고 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;여기서 우리는 지난 몇년간 Chrome을 통해서 큰 사이트들의 방법을 알 수 있었습니다. 전반적으로, &lt;strong&gt;full rehydration&lt;/strong&gt; 접근법을 통해서 server rendering 혹은 static rendering을 고려할 것을 권장하고 있습니다.&lt;/p&gt;

&lt;p&gt;이러한 결정을 내릴 때 고려중인 여러 architecture를 더 잘 이해하려면 각 방식에 대해서 확실히 이해하고 일관된 용어를 사용해야 합니다. 이러한 접근방식간의 차이를 잘 이해하면, 각 방식들의 performance적인 측면에서 trade-off를 더 잘 이해할 수 있습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;terminology&quot;&gt;Terminology&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Rendring&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;SSR: Server-Side Rendering - Client side 혹은 범용 application을 &lt;em&gt;서버에서&lt;/em&gt; HTML로 rendering 합니다.&lt;/li&gt;
  &lt;li&gt;CSR: Client-Side Rendering - Browser에서 DOM을 사용해서 Application을 rendering합니다.&lt;/li&gt;
  &lt;li&gt;Rehydration: Server에서 rendering 한 HTML DOM 트리와 data를 client에서 재사용하도록 자바 스크립트 뷰를 “부팅”합니다.&lt;/li&gt;
  &lt;li&gt;Prerendering: Build시에 client-side application을 실행해서 초기 상태를 static HTML로 저장합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Performance&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;TTFB: Time to First Byte - 링크를 클릭했을 때와 해당 링크 contents의 첫 번째 bit가 들어왔을 때 사이의 시간.&lt;/li&gt;
  &lt;li&gt;FP: First Paint - 사용자가 첫 번째 pixel을 볼 수 있는 시간.&lt;/li&gt;
  &lt;li&gt;FCP: First Contentful Paint - Article body같은 요청한 내용이 보이는 시간.&lt;/li&gt;
  &lt;li&gt;TTI: Time To Interactive - Page가 interactive(event 연결 등)하게 된 시간.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;server-rendering&quot;&gt;Server Rendering&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Server rendering은 요청에 대한 page의 전체 HTML을 server에서 생성합니다. 이 방식은 browser에 전달되기 전에 page를 모두 제작하기 떄문에, client-side에서 data를 가져오거나 템플링을 위한 추가 round-trip이 발생하지 않습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Server rendering에서는 일반적으로 First Paint(FP)와 First Contentful Paint(FCP)가 빠릅니다. Page의 logic과 rendering을 server에서 실행하면 client에서 많은 JavaScript가 필요하지 않게 되므로 빠른 Time to Interactive(TTI)를 얻을 수 있습니다. 이러한 방법들은 server rendering이 사용자의 browser에 오직 text와 link만 보낸다면 유용할 수 있습니다. 이러한 접근 방식은 넓은 범위의 장치 및 네트워크 상태에서 잘 작동하며, streaming document parsing과 같은 browser 최적화에 대해서 흥미롭게 이야기할 수 있습니다.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;img src=&quot;https://shlrur.github.io//assets/images/rendering-on-the-web/0_server-rendering-tti.png&quot; alt=&quot;server rendering TTI&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;Server rendering의 경우, JavaScript때문에 생기는 loading으로 인해서 page가 로딩되는 것을 기다리는 경우가 거의 없습니다. Third-party JS를 제외할 수 없는 경우에도, server rendering을 사용한다면 First-party JS cost가 줄어들기 때문에 더 많은 여유 자원을 사용할 수 있습니다. 그러나 이 접근 방식의 주요 단점은 server에서 page를 생성하는데 시간이 걸리기 때문에 종종 Time to First Byte(TTFB)가 느려질 수 있다는 점입니다.&lt;/p&gt;

&lt;p&gt;Server rendering이 자신의 application에 충분한지 여부는 어떤 유형의 환경을 구축하느냐에 달려있습니다. Server rendering과 client rendering사이에서 어떤 방식이 올바른 application 방식이냐에 대한 오랜 논쟁이 있지만, 더 중요한 사실은 server rendering을 어떤 page에는 적용하고 어떤 page에는 적용하지 않도록 고를 수 있다는 점입니다. 일부 사이트는 hybrid rendering 기술을 적용함으로써 성공을 거두었습니다. Netflix를 예로 들면, Netflix는 비교적 정적인 page는 server rendering을 사용하고, 많은 상호작용이 많이 필요한 page에서는 JS를 prefetch하여 많은 client rendering이 필요한 page가 빨리 loading 되도록 했습니다.&lt;/p&gt;

&lt;p&gt;많은 최신의 framework, library, 그리고 architecture들을 통해서 client와 server 모두에서 동일한 application을 rendering할 수 있습니다. 이러한 기술들을 Server rendering을 위해 사용할 수 있지만, &lt;strong&gt;server와 client 모두&lt;/strong&gt;에서 rendering을 할 수 있는 architecture들은 매우 다른 performance 특성과 trade-off들을 가지는 자체 유형의 solution이라는 점에 유의해야 합니다.&lt;/p&gt;

&lt;p&gt;React 사용자들은 &lt;a href=&quot;https://reactjs.org/docs/react-dom-server.html&quot;&gt;renderToString()&lt;/a&gt; 혹은 server rendering을 위한 &lt;a href=&quot;https://nextjs.org/&quot;&gt;Next.js&lt;/a&gt;와 같은 solution을 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;Vue 사용자들은 Vue의 (server rendering guide)[https://ssr.vuejs.org/]를 보거나 &lt;a href=&quot;https://nuxtjs.org/&quot;&gt;Nuxt&lt;/a&gt;를 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;Angular 사용자들에게는 &lt;a href=&quot;https://angular.io/guide/universal&quot;&gt;Universal&lt;/a&gt;이 있습니다.&lt;/p&gt;

&lt;p&gt;대부분의 인기 있는 solution은 hydration 기법을 사용하기 때문에, solution을 선택하기 전에 사용 방법을 숙지해야 합니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;static-rendering&quot;&gt;Static Rendering&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://frontarm.com/james-k-nelson/static-vs-server-rendering/&quot;&gt;Static rendering&lt;/a&gt;은 build시에 일어나며, 빠른 First Paint(FP), First Contentful Paint(FCP), 그리고 Time To Interactive(TTI)를 제공합니다.(client-side JS의 양이 제한되어 있다고 가정합니다) Server rendering과는 다르게, page의 HTML을 즉석에서 생성 할 필요가 없기 때문에 일관성있게 빠른 Time To First Byte(TTFB)를 얻을 수 있습니다. 일반적으로, static rendering은 각 URL에 대한 HTML 파일을 미리 생성해 놓습니다. 지금 보고 있는 Jekyll blog 역시 Static rendering을 사용합니다. Response인 HTML을 미리 생성해 놓으면, static render는 여러 CDN에 배포함으로서 edge-caching의 이점을 가져갈 수 있습니다.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;img src=&quot;https://shlrur.github.io//assets/images/rendering-on-the-web/1_static-rendering-tti.png&quot; alt=&quot;static rendering TTI&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;Static rendering을 위한 solution들은 모든 모양과 크기를 제공합니다. &lt;a href=&quot;https://www.gatsbyjs.org/&quot;&gt;Gatsby&lt;/a&gt;같은 경우는 개발자들이 자신의 application이 build 단계를 거치지 않고, 동적으로 동작하는 것 처럼 느끼게 디자인 되어 있습니다. &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;이나 &lt;a href=&quot;https://metalsmith.io/&quot;&gt;Metalsmith&lt;/a&gt;같은 다른 solution들은 static 한 성질을 이용해서 좀 더 tamplate-driven의 접근 방식을 제공합니다.&lt;/p&gt;

&lt;p&gt;Static rendering의 단점 중 하나는 가능한 모든 URL에 대해 개별 HTML 파일을 생성해야 한다는 것입니다. 이는 URL이 무엇을 뜻하는지 예측하기 힘들거나 고유 페이지가 많은 site의 경우 여러 문제가 있을 수 있습니다.&lt;/p&gt;

&lt;p&gt;React 사용자의 경우 &lt;a href=&quot;https://www.gatsbyjs.org/&quot;&gt;Gatsby&lt;/a&gt;, &lt;a href=&quot;https://nextjs.org/learn/excel/static-html-export/&quot;&gt;Next.js static export&lt;/a&gt;, 혹은 &lt;a href=&quot;https://frontarm.com/navi/&quot;&gt;Navi&lt;/a&gt;가 익숙할 수 있습니다. (이 library들을 사용해서 component를 쉽게 작성할 수 있습니다) 하지만, static rendering과 prerendering 사이의 차이를 이해하는 것이 중요합니다. Static rendering page는 client-side JS를 많이 실행하지 않아도 interactive한 반면, prerendering은 First Paint(FP) 혹은 SPA의 First Contentful Paint(FCP)를 향상시킵니다. Prerendering은 page가 interactive할 수 있도록 content를 client-side에서 생성합니다.&lt;/p&gt;

&lt;p&gt;주어진 solution이 static rendering인지 prerendering인지 확실하지 않으면 다음의 test를 해볼 수 있습니다. &lt;em&gt;JavaScript를 disable로 한 후에 다시 web page를 load해보세요.&lt;/em&gt; Static rendered page의 경우 JavaScript가 disable이라도 대부분의 기능이 사용 가능합니다. Prerendered page의 경우 link같은 기본 기능은 가능할지 몰라도 대부분의 page는 비활성 상태가 됩니다.&lt;/p&gt;

&lt;p&gt;또 다른 유용한 test는 Chrome DevTools를 사용하여 네트워크를 느리게 하고 page가 interactive되기 전에 얼마나 많은 JavsScript를 download하는지 보는 것입니다. Prerendering의 경우 interactive를 위해 더 많은 JavaScript가 필요하며, JavaScript는 static rendering에서 사용하는 Progressive Enhancement 접근 방식보다 더 복잡한 경향이 있습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;server-rendering-vs-static-rendering&quot;&gt;Server Rendering vs Static Rendering&lt;/h1&gt;

&lt;p&gt;Server rendering은 비장의 무기(silver bullet)가 아닙니다. (Server rendering만으로 모든걸 해결할 수 없다는 뜻입니다) 동적인 특성으로 인해 &lt;a href=&quot;https://medium.com/airbnb-engineering/operationalizing-node-js-for-server-side-rendering-c5ba718acfc9&quot;&gt;상당한 compute overhead&lt;/a&gt;가 발생할 수 있기 때문입니다. 많은 server rendering solution은 일찍 flush하지 않으며 TTFB를 지연시키거나 전송되는 data를 2배로 늘릴 수도 있습니다. (ex: client에서 JS로 인한 inlined state) React의 renderToString()은 synchronous이고 single-thread이기 때문에 느려질 수 있습니다. Server rendering을 &lt;strong&gt;올바르게&lt;/strong&gt; 사용하기 위해서는 component caching, memory 사용량 관리, &lt;a href=&quot;https://en.wikipedia.org/wiki/Memoization&quot;&gt;memoization&lt;/a&gt; 기법 적용, 등등에 대한 solution을 찾거나 구축해야 합니다. 일반적으로 같은 application을 여러번 processing/rebuilding 하게 됩니다. (client에서 한번, server에서 한번…) Server rendering으로 인해 무언가를 더 빨리 보여줄 수 있다고 해서 개발자가 할 일이 줄어들지는 않습니다…ㅠ&lt;/p&gt;

&lt;p&gt;Server rendering은 각 URL에 대한 HTML을 on-demand 방식으로 생성하지만, static rendering으로 생성된 contents를 제공하는 것 보다 느릴 수 있습니다. 발품을 좀 더 팔수있다면, server rendering + &lt;a href=&quot;https://freecontent.manning.com/caching-in-react/&quot;&gt;HTML caching&lt;/a&gt; 으로 server render time을 확 줄일 수 있습니다. Server rendering의 장점은 static rendering보다 좀 더 “live”한 data를 사용함으로써 요청에 대한 좀 더 완벽한 응답을 할 수 있다는 점입니다. Static rendering에 적합하지 않은 구체적인 예로, 개인화(personalization)가 필요한 page를 들 수 있습니다.&lt;/p&gt;

&lt;p&gt;또한, Server rendering은 &lt;a href=&quot;https://developers.google.com/web/progressive-web-apps/&quot;&gt;PWA&lt;/a&gt;를 구축할 때 재미있는 질문을 할 수 있습니다. 전체 페이지 &lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/service-workers/&quot;&gt;service worker&lt;/a&gt; caching을 하는게 좋을까요, 개별 content를 server rendering 하는 것이 좋을까요?&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.google.com/web/updates/2019/02/rendering-on-the-web&quot;&gt;Rendering on the Web&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/user-centric-performance-metrics&quot;&gt;User-cectric Performance Metrics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://frontarm.com/james-k-nelson/static-vs-server-rendering/&quot;&gt;Static vs. Server Rendering&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gatsbyjs.org/&quot;&gt;Gatsby&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://metalsmith.io/&quot;&gt;Metalsmith&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://nextjs.org/learn/excel/static-html-export/&quot;&gt;Next.js static export&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://frontarm.com/navi/&quot;&gt;Navi&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/airbnb-engineering/operationalizing-node-js-for-server-side-rendering-c5ba718acfc9&quot;&gt;Operationalizing Node.js for Server Side Rendering&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Memoization&quot;&gt;memoization&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://freecontent.manning.com/caching-in-react/&quot;&gt;HTML caching&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Heekyum</name></author><category term="javascript" /><summary type="html">개인 프로젝트를 진행하면서 계속해서 고민하고 있는 부분이 있습니다. 바로 SAP와 SSR인데요, 현재 사이트는 SAP로 구현하고 있습니다. 하지만 사이트가 검색엔진에서 검색되어져야 한다거나, 굳히 single page로 구현하지 않아도 되는 page 등의 이유로 부분적인 server side rendering도 고려하고 있습니다.</summary></entry><entry><title type="html">What features will added in ES2019</title><link href="https://shlrur.github.io//develog/2019/01/29/what-features-will-added-in-es2019/" rel="alternate" type="text/html" title="What features will added in ES2019" /><published>2019-01-29T00:00:00+00:00</published><updated>2019-01-29T00:00:00+00:00</updated><id>https://shlrur.github.io//develog/2019/01/29/what-features-will-added-in-es2019</id><content type="html" xml:base="https://shlrur.github.io//develog/2019/01/29/what-features-will-added-in-es2019/">&lt;p&gt;이번 post에서는 2019년에 발표될 &lt;strong&gt;ES2019&lt;/strong&gt;에 추가될 예정인 기능들에 대해서 살펴보겠습니다.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;img src=&quot;https://shlrur.github.io//assets/images/what-features-will-added-in-es2019/article-logo.jpg&quot; alt=&quot;new features in es2019&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;JavaScript는 지난 몇 년 동안 꾸준히 새로운 표준을 발표해왔습니다. 바로 Ecma International의 ECMA-262 기술 규격에 정의된 &lt;a href=&quot;https://www.ecma-international.org/publications/standards/Ecma-262.htm&quot;&gt;ECMAScript&lt;/a&gt; 인데요, 현재 9번째 버전인 &lt;a href=&quot;https://www.ecma-international.org/ecma-262/9.0/index.html&quot;&gt;ES2018&lt;/a&gt;까지 나와 있습니다.
그리고 현재 ES2019에 대한 명세가 작성되고 있습니다. 이번 post에서는 ECMAScript가 어떤 과정을 거쳐서 표준 문서를 만드는지 간단히 알아보고, ES2019에 들어갈 수도 있는 기능에 대해서 알아보겠습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;contents&quot;&gt;Contents&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#the-tc39-process&quot;&gt;The TC39 Process&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#es2019-candidates&quot;&gt;ES2019 Candidates&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#stage-3-features&quot;&gt;Stage 3 Features&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#globalthis&quot;&gt;globalThis&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#import&quot;&gt;import()&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#legacy-regexp-features-in-javascript&quot;&gt;Legacy RegExp features in JavaScript&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#bigint&quot;&gt;BigInt&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#stringprototypematchall&quot;&gt;String.prototype.matchAll&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#finished-proposal-features&quot;&gt;Finished Proposal Features&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#optional-catch-binding&quot;&gt;Optional catch binding&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#subsume-jsonjson-superset&quot;&gt;Subsume JSON(JSON superset)&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#symbolprototypedescription&quot;&gt;Symbol.prototype.description&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#functionprototypetostring-revision&quot;&gt;Function.prototype.toString revision&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#objectfromentries&quot;&gt;Object.fromEntries&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#well-formed-jsonstringify&quot;&gt;Well-formed JSON.stringify&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#stringprototypetrimstarttrimend&quot;&gt;String.prototype.{trimStart,trimEnd}&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#arrayprototypeflatflatmap&quot;&gt;Array.prototype.{flat,flatMap}&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#references&quot;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;the-tc39-process&quot;&gt;The TC39 Process&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tc39&quot;&gt;TC39&lt;/a&gt;란 ECMA에서 ECMA-262에 대한 표준을 정의하는 기술 위원회(technical committee)입니다. &lt;a href=&quot;https://tc39.github.io/process-document/&quot;&gt;TC39에서 ECMAScript를 정의하는 절차&lt;/a&gt;는 Stage로 구분하며 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Stage-0: 밀짚 인형(Strawman)
    &lt;ul&gt;
      &lt;li&gt;Allow input into the specification&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Stage-1: 제안(Proposal)
    &lt;ul&gt;
      &lt;li&gt;Make the case for the addition&lt;/li&gt;
      &lt;li&gt;Describe the shape of a solution&lt;/li&gt;
      &lt;li&gt;Identify potential challenges&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Stage-2: 초고(Draft)
    &lt;ul&gt;
      &lt;li&gt;Precisely describe the syntax and semantics using formal spec language&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Stage-3: 후보(Candidate)
    &lt;ul&gt;
      &lt;li&gt;Indicate that further refinement will require feedback from implementations and users&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Stage-4: 완료(Finished)
    &lt;ul&gt;
      &lt;li&gt;Indicate that the addition is ready for inclusion in the formal ECMAScript standard&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;앞의 Stage(0~4)에서 새로 추가될 것으로 이야기됐던 기능들이 Stage 4까지 오지 않는 한 ECMAScript 표준에 추가된다는 보장은 없습니다. 현재(2019년 1월 30일) &lt;a href=&quot;https://github.com/tc39/proposals&quot;&gt;ES2019 proposals&lt;/a&gt;를 보면, Stage 4인 Finished Proposal에 들어간 기능도 있고 아직 Stage 3에서 수락을 기다리고 있는 기능도 있습니다. 그러므로 아래에서 살펴볼 기능 중에서 Stage 3에 있는 후보들은 ES2019에 포함되지 않을 수도 있습니다. 하지만, Stage 3까지 논의됐다는 것만으로도 충분히 흥미롭고 중요한 기능입니다.&lt;/p&gt;

&lt;p&gt;그리고 ECMAScript에 표준으로 아직 추가되지 않은 기능이지만 몇몇 JavaScript engine(V8, SpiderMonkey 등)에서는 그 기능들을 구현한 경우도 있습니다. 어떤 JavaScript engine에서 제공하는지는 &lt;a href=&quot;https://caniuse.com/&quot;&gt;Can I Use?&lt;/a&gt; 에서 찾아볼 수 있습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;es2019-candidates&quot;&gt;ES2019 Candidates&lt;/h1&gt;

&lt;h2 id=&quot;stage-3-features&quot;&gt;Stage 3 Features&lt;/h2&gt;
&lt;p&gt;Stage 3에 있는 Candidate Feature들은 대부분 완성에 가깝고, 구현 주체나 사용자들로부터 피드백을 좀 더 받아보는 일만이 남은 상태입니다. Stage 3에 들어오기 위해서는 Stage 2의 Draft와는 다르게 빈칸 없이 문법, 동작, 그리고 API까지 모든 부분이 기술되어 있도록 마무리된 명세가 필요합니다.&lt;/p&gt;

&lt;p&gt;Stage 3까지 올라온 feature는 이후 구현상 심각한 문제가 발견되지 않는 이상 변경이 허용되지 않습니다. 이 시점에서는 실제로 ECMA-262 표준에 편입시키고자 하는 해당 표준의 명세가 거의 마무리 된 상태여야 합니다.&lt;/p&gt;

&lt;p&gt;아래에서는 Stage 3 proposal 중에서 Stage 4로 갈 확률이 높은 feature를 살펴보겠습니다. (test를 위한 pull request가 merge 되었는지를 기준으로 하였습니다)&lt;/p&gt;

&lt;h3 id=&quot;globalthis&quot;&gt;globalThis&lt;/h3&gt;

&lt;p&gt;ECMAScript를 사용해서 코드를 작성할 때, 어느 환경에서나 적용할 수 있도록 &lt;em&gt;&lt;strong&gt;global object&lt;/strong&gt;에 접근하는 것은 어렵습니다.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Web에서는 &lt;strong&gt;Window&lt;/strong&gt; 혹은 &lt;strong&gt;self&lt;/strong&gt;, &lt;strong&gt;this&lt;/strong&gt; 그리고 &lt;strong&gt;frames&lt;/strong&gt;를 통해 &lt;em&gt;&lt;strong&gt;global object&lt;/strong&gt;&lt;/em&gt; 에 접근 가능합니다.&lt;/li&gt;
  &lt;li&gt;node.js에서는 &lt;strong&gt;global&lt;/strong&gt; 혹은 &lt;strong&gt;this&lt;/strong&gt;로 접근 가능합니다.&lt;/li&gt;
  &lt;li&gt;이 중에서, &lt;strong&gt;this&lt;/strong&gt;만이 shell(V8의 d8이나 JavaScriptCore의 jsc같은)에서 사용 가능합니다.&lt;/li&gt;
  &lt;li&gt;엉성한 standalone function call에서 역시 &lt;strong&gt;this&lt;/strong&gt;는 작동하지만, module이나 strict mode의 function에서 &lt;strong&gt;this&lt;/strong&gt;는 undefined입니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Function(‘return this’)()&lt;/strong&gt; 로 global object에 접근할 수 있지만, Chrome Apps와 같은 CSP setting에서는 접근 불가능합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위와 같은 문제 때문에, ECMAScript를 사용하는 환경에 상관없이 global object에 접근하기가 힘듭니다.&lt;/p&gt;

&lt;p&gt;이를 해결하기 위해서 제안된 것이 &lt;a href=&quot;https://github.com/tc39/proposal-global&quot;&gt;&lt;strong&gt;globalThis&lt;/strong&gt;&lt;/a&gt;입니다. &lt;strong&gt;globalThis&lt;/strong&gt; property는 환경에 상관없이 global object에 접근 가능한 standard way입니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;globalThis&lt;/strong&gt;가 있다면, 아래와 같이 여러 환경을 고려해서 global object를 가져오는 code가 필요 없어집니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// If we're in a browser, the global namespace is named 'window'. If we're&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// in node, it's named 'global'. If we're in a shell, 'this' might work.&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;undefined&quot;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'object'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
		   &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'function'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
		   &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'object'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;global&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getGlobal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// the only reliable means to get the global object is&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// `Function('return this')()`&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// However, this causes CSP violations in Chrome apps.&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'undefined'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'undefined'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'undefined'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'unable to locate global object'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;import&quot;&gt;import()&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tc39/proposal-dynamic-import&quot;&gt;import()&lt;/a&gt;는 기존의 &lt;em&gt;pre-runtime에 import를 하는 정적인 방식&lt;/em&gt; 이 아닌, &lt;strong&gt;runtime에 import 할 수 있는 동적인 방식&lt;/strong&gt; 을 제안하고 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;motivation&quot;&gt;motivation&lt;/h4&gt;
&lt;p&gt;현재 module import를 위해 사용하는 방식은 정적인 선언(static declarations)입니다. Import 할 module의 식별자로 문자열을 받고, pre-runtime에 “linking” process를 거침으로써 local scope에 binding 합니다. 이런 정적인 선언은 90%의 경우에 매우 좋은 방식입니다.&lt;/p&gt;

&lt;p&gt;하지만, runtime에 JavaScript application의 일부를 load 할 수 있는 것도 바람직한 방법입니다. 그 이유는 다음과 같습니다. 사용자의 언어와 같은 &lt;strong&gt;runtime에만 알 수 있는 요소&lt;/strong&gt;들이 있습니다. 그리고 사용되지 않을 코드는 load 하지 않기 때문에 &lt;strong&gt;performance 측면&lt;/strong&gt;에서도 이유가 될 수 있습니다. 혹은 중요하지 않은 module을 load 했을 때 생기는 문제를 피함으로써 견고함에도 이유가 될 수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;proposed-solution&quot;&gt;Proposed solution&lt;/h4&gt;
&lt;p&gt;해당 proposal은 function처럼 동작하는 &lt;strong&gt;import(specifier)&lt;/strong&gt;를 제안합니다. &lt;strong&gt;이 함수는 request module에 대한 module namespace object를 가지는 promise를 return 합니다. 해당 module namespace object는 fetching, instantiating, 그리고 관련된 다른 module에 대한 evaluating까지 완료한 후 자신의 module로써 제공됩니다.&lt;/strong&gt;
import(specifier)의 &lt;strong&gt;specifier&lt;/strong&gt;는 string literal뿐만 아니라 backtick 형태도 지원합니다.&lt;/p&gt;

&lt;h4 id=&quot;example&quot;&gt;Example&lt;/h4&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;nav&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;books.html&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-entry-module=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;books&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Books&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;movies.html&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-entry-module=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;movies&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Movies&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;video-games.html&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-entry-module=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;video-games&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Video Games&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;main&amp;gt;&lt;/span&gt;Content will load here!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nav &amp;gt; a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`./section-modules/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;entryModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.js`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loadPageInto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textContent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;legacy-regexp-features-in-javascript&quot;&gt;Legacy RegExp features in JavaScript&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tc39/proposal-regexp-legacy-features&quot;&gt;해당 proposal&lt;/a&gt;은 &lt;strong&gt;RegExp.$1와 같은 생성자의 static properties&lt;/strong&gt;와 &lt;strong&gt;RegExp.prototype.compile method&lt;/strong&gt;가 RegExp에서 deprecated 된 것에 문제를 제기하고 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tc39/proposal-regexp-legacy-features/blob/master/subclass-restriction-motivation.md&quot;&gt;해당 기능들이 deprecated 된 이유는 encapsulation을 위반했기 때문이라는 설명&lt;/a&gt;을 하며, 해결책을 제안하고 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;bigint&quot;&gt;BigInt&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tc39/proposal-bigint&quot;&gt;BigInt&lt;/a&gt;는 2&lt;sup&gt;53&lt;/sup&gt; 보다 큰 수를 표현하기 위한 새로운 primitive type입니다. (JavaScript에서 기존의 숫자를 표현하는 primitive type인 Number는 2&lt;sup&gt;53&lt;/sup&gt;까지만 표현 가능합니다)&lt;/p&gt;

&lt;p&gt;BigInt의 syntax는 다음과 같이 integer의 끝에 ‘n’을 붙이거나 생성자를 호출합니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;theBiggestInt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9007199254740991&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alsoHuge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BigInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9007199254740991&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ↪ 9007199254740991n&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hugeButString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BigInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'9007199254740991'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ↪ 9007199254740991n&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;+, -, *, ** 그리고 % 같은 연산들 역시 가능합니다. 그 외에 comparison, conditional 등등의 여러 usecase와 gotcha에 대한 설명은 &lt;a href=&quot;https://github.com/tc39/proposal-bigint&quot;&gt;여기&lt;/a&gt;를 참조하세요.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;stringprototypematchall&quot;&gt;String.prototype.matchAll&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tc39/proposal-string-matchall&quot;&gt;해당 proposal은 &lt;strong&gt;String.prototype.exec&lt;/strong&gt;이 단일 결과값을 return 하는 것을 보완하여, 모든 결과값을 return 하는 &lt;strong&gt;String.prototype.matchAll&lt;/strong&gt;을 제안하고 있습니다.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;기존의 &lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec#%EC%84%A4%EB%AA%85&quot;&gt;String.prototype.exec은 단일 결과값을 이러한 format&lt;/a&gt;으로 보여줍니다. exec()을 사용해서 모든 만족하는 결과를 얻기 위해서는 loop를 사용해야 합니다. 이런 과정을 거쳐서 주어진 string에서 정규표현식과 일치하는 모든 부분을 찾는 logic은 아래의 코드와 같습니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;regex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/t&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;(\d?))&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'test1test2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;matches&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lastIndexes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;lastIndexes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lastIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;lastIndexes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lastIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// example: ['test1', 'e', 'st1', '1'] with properties `index` and `input`&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* gives exactly what i want, but uses a loop,
		* and mutates the regex's `lastIndex` property */&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;lastIndexes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ideally should give { 0: true } but instead
		* will have a value for each mutation of lastIndex */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드는 &lt;strong&gt;matches&lt;/strong&gt; 변수에 원하는 결과가 들어있지만, loop를 사용했고, regex의 lastIndex property를 변경했다는 단점이 있습니다.&lt;/p&gt;

&lt;p&gt;아래의 코드는 String.prototype.exec가 아닌 &lt;strong&gt;String.prototype.replace&lt;/strong&gt;의 두 번째 parameter에 function을 사용한 경우입니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;regex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/t&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;(\d?))&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'test1test2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;matches&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// example: ['test1', 'e', 'st1', '1'] with properties `index` and `input`&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* gives exactly what i want, but abuses `replace`,
	  * mutates the regex's `lastIndex` property,
	  * and requires manual construction of `match` */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드는 앞의 코드가 가지는 단점을 보완했지만, replace 함수를 남용하였고, 역시 regex의 lastIndex property를 변경했다는 단점이 있습니다. 그리고 match 변수를 직접 작성해야 합니다.&lt;/p&gt;

&lt;p&gt;이러한 단점들이 있기 때문에, 주어진 string에서 정규표현식과 일치하는 모든 결과값을 return 하는 &lt;strong&gt;String.prototype.matchAll&lt;/strong&gt; 을 표준에 포함하길 제안하고 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;finished-proposal-features&quot;&gt;Finished Proposal Features&lt;/h2&gt;
&lt;p&gt;마지막 Stage 4는 모든 단계를 거치고 마침내 제안이 수락되고 다음 표준에 포함되어 발표되기만을 기다리는 단계입니다. Stage 3의 proposal이 ECMA-262의 unit test suit인 Test262에 관련 테스트가 작성되고, 최소 2개 이상의 구현이 제공되는 등의 까다로운 추가 조건을 모두 만족하면 마침내 Stage 4로 올라올 수 있습니다.&lt;/p&gt;

&lt;p&gt;Stage 4까지 올라온 proposal은 별다른 이변이 없는 이상 다가오는 새 표준에 포함되어 발표됩니다. 2015년을 기점으로 매년 6월 새로운 ECMAScript 표준이 발표되는데, 당해 3월 전까지 Stage 4를 달성하고 3월 회의에서 최종 승인된 제안들이 새 표준에 포함됩니다.&lt;/p&gt;

&lt;p&gt;현재 ES2019에 포함될 것으로 예상되는, finished proposal은 다음과 같습니다.&lt;/p&gt;

&lt;h3 id=&quot;optional-catch-binding&quot;&gt;Optional catch binding&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tc39/proposal-optional-catch-binding&quot;&gt;이 proposal은 try와 함께 사용하는 &lt;strong&gt;catch&lt;/strong&gt;에 대한 수정을 요구하고 있습니다.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;기본 주장은 &lt;strong&gt;catch&lt;/strong&gt;에 binding 되는 &lt;strong&gt;exception variable&lt;/strong&gt;이 사용되지 않는 경우가 많으니, 생략할 수 있게 문법적인 변경을 요청하는 것입니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// try to use a web feature which may not be implemented&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unused&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// fall back to a less desirable web feature with broader support&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// or&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isTheFeatureImplemented&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// stress the required bits of the web API&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;isTheFeatureImplemented&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unused&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// or&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parseResult&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someFallbackValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;parseResult&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;potentiallyMalformedJSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unused&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드에서 보여주는 3가지 경우에는 &lt;strong&gt;catch&lt;/strong&gt;에 binding 되는 &lt;em&gt;unused&lt;/em&gt; 라는 parameter는 사용되지 않으며 불필요합니다. 사용하지 않는 variable이 있다는 건 프로그래밍 에러를 일으킬 수도 있습니다.&lt;/p&gt;

&lt;p&gt;그래서 해당 proposal은 아래와 같은 코드의 허용을 제안합니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;subsume-jsonjson-superset&quot;&gt;Subsume JSON(JSON superset)&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tc39/proposal-json-superset&quot;&gt;해당 proposal은 ECMAScript의 string이 &lt;strong&gt;U+2028&lt;/strong&gt;과 &lt;strong&gt;U+2029&lt;/strong&gt;를 포함하기를 제안합니다.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;JSON string은 unescaped &lt;strong&gt;U+2028 LINE SEPARATOR&lt;/strong&gt; 와 &lt;strong&gt;U+2029 PARAGRAPH SEPARATOR&lt;/strong&gt; character를 포함합니다. 하지만 ECMAScript string은 포함하지 않습니다.&lt;/p&gt;

&lt;p&gt;이 때문에 specification에 있어서 불필요한 복잡성이 증가하고, 개발자와 사용자에게 부담이 더해집니다. 그리고 valid JSON을 valid ECMAScript로 넣는데 불필요한 과정이 필요하게 됩니다.&lt;/p&gt;

&lt;p&gt;이를 해결하기 위해서, JSON syntax는 ECMA-404에 정의되어있고 RFC 7159로 인해서 영구히 fix 되었으니, ECMA-262에 의한 &lt;em&gt;DoubleStringCharacter&lt;/em&gt; 과 &lt;em&gt;SingleStringCharacter&lt;/em&gt; 를 확장해서 unescaped &lt;strong&gt;U+2028 LINE SEPARATOR&lt;/strong&gt; 와 &lt;strong&gt;U+2029 PARAGRAPH SEPARATOR&lt;/strong&gt; character를 허용하자고 제안하고 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;symbolprototypedescription&quot;&gt;Symbol.prototype.description&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tc39/proposal-Symbol-description&quot;&gt;해당 proposal은 Symbol을 사용함에 있어서, description에 바로 접근할 수 있는 &lt;strong&gt;Symbol.prototype.description&lt;/strong&gt;의 추가를 제안하고 있습니다.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;기존에는 Symbol의 description을 알기 위해서 Symbol.prototype.toString을 사용했지만, description만을 얻기 위해서는 적절치 않은 방법이라고 말하고 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;functionprototypetostring-revision&quot;&gt;Function.prototype.toString revision&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tc39/Function-prototype-toString-revision&quot;&gt;해당 proposal의 목적은 Function.prototype.toString 의 현재 기능을 바꾸는 것입니다.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Function.prototype.toString은 Object.prototype.toString을 그대로 쓰는 것이 아니라 override 해서 사용하고 있습니다.&lt;/p&gt;

&lt;p&gt;이전의 ECMAScript에서 Function.prototype.toString을 실행하면 다음 중 하나가 발생합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ECMAScript engine에 따른 function의 source code가 string으로 반환됨.&lt;/li&gt;
  &lt;li&gt;ECMAScript engine이 적절한 source code를 생성할 수 없을때는, &lt;em&gt;evel&lt;/em&gt; 을 사용했을 때 &lt;em&gt;SyntaxError&lt;/em&gt; 를 유발하는 string을 반환함.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 proposal에서 제안하는 solution은 특정 case마다 구분해놓았습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ECMAScript code를 사용해서 정의한 function의 경우 original source code를 return 해야 한다. (for functions defined using ECMAScript code, toString must return source text slice from beginning of first token to end of last token matched by the appropriate grammar production)
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'My Function!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// case user-defined =&amp;gt; &quot;function () { console.log('My Function!'); }&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;built-in function 객체 및 binding 된 이질적인 객체의 경우, NativeFunction외에 어떤 것도 return 해서는 안된다. (for built-in function objects and bound function exotic objects, toString must not return anything other than NativeFunction)
```js
console.log(Number.parseInt.toString());
// case built-in =&amp;gt; “function () { [native code] }”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;console.log(function () { }.bind(0).toString());
// case binding =&amp;gt; “function () { [native code] }”&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* ECMAScript code를 사용해서 정의하지 않은 호출 가능한 객체의 경우 NativeFunction을 반환해야 함. (for callable objects which were not defined using ECMAScript code, toString must return NativeFunction)
```js
console.log(Symbol.toString());
// case Built-in callable =&amp;gt; &quot;function Symbol() { [native code] }&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Function 및 GeneratorFunction 생성자를 통해 dynamic 하게 생성되는 function의 경우, ToString이 소스 텍스트를 합성해야 함. (for functions created dynamically (through the Function and GeneratorFunction constructors), toString must synthesise a source text)
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// case Dynamically generated =&amp;gt; &quot;function anonymous() {}&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;이 외의 모든 다른 object에 대해서는 TypeError가 나온다. (for all other objects, toString must throw a TypeError exception)
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// case all other objects =&amp;gt; &quot;Uncaught TypeError: Function.prototype.toString requires that 'this' be a Function&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;objectfromentries&quot;&gt;Object.fromEntries&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tc39/proposal-object-from-entries&quot;&gt;해당 proposal에서는 &lt;strong&gt;Object.fromEntries&lt;/strong&gt; 라는 static method를 제안하고 있습니다.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Object.fromEntries&lt;/strong&gt;는 key-value 쌍의 list(array)를 object로 바꿔주는 ECMAScript의 static method입니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fromEntries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// =&amp;gt; { a: 0, b: 1 }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Object.fromEntries가 필요한 이유는 다음과 같습니다.&lt;/p&gt;

&lt;p&gt;Array나 Map 등 다양한 structure에 저장된 data를 한 형태에서 다른 형태로 변환하는 작업은 일반적입니다. 두 data 구조가 모두 iterable할 때 아래의 코드와 같이 간단히 해결할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'foo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'bar'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Map의 iterable entries는 key-value 형태를 가집니다. 이런 형태는 Object.entries가 return 하는 형태와 잘 들어맞기 때문에, object를 Map으로 잘 변환할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;하지만, key-value 형태에서 객체를 만들기 위한 역방향 Object.entries가 없으므로&lt;/strong&gt;, 일반적으로 helper나 inline reducer를 사용해야 합니다.&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 여러 방법으로 해당 기능을 구현할 수 있지만, 해당 method들이 본래의 목적으로 사용되는 것이 아니기 때문에 잠재적인 문제를 가질 수 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://lodash.com/docs/4.17.11#fromPairs&quot;&gt;Lodash에서는 이미 해당 기능이 구현되어 있습니다.&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;well-formed-jsonstringify&quot;&gt;Well-formed JSON.stringify&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tc39/proposal-well-formed-stringify&quot;&gt;해당 proposal&lt;/a&gt;의 동기는 다음과 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc8259#section-8.1&quot;&gt;RFC 8259 section 8.1&lt;/a&gt; 는 JSON이 closed ecosystem 밖에서 가져온 text를 UTF-8을 사용해서 encoding 하길 원합니다. 하지만, ECMAScript의 JSON.stringify은 UTF-8에서 표현할 수 없는 code point도 string으로 return 합니다. 특히 surrogate code인 U+D800 ~ U+DFFF가 있습니다. 이 코드는 UTF-8에서 다른 목적으로 사용하기 위해 예약되어 있습니다. 그리고 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-json.stringify&quot;&gt;JSON.stringify의 description&lt;/a&gt;과는 반대로, 몇몇 string은 UFT-16에 들어가지 않습니다. 왜냐하면, &lt;a href=&quot;https://unicode.org/versions/Unicode10.0.0/ch03.pdf#G7404&quot;&gt;The Unicode Standard, Version 10.0.0, Section 3.4&lt;/a&gt;의 definition D91에 “UTF-16 code unit에서 D800&lt;sub&gt;16&lt;/sub&gt;에서 DFFF&lt;sub&gt;16&lt;/sub&gt;는 부적절하다(isolated UTF-16 code units in the range D800&lt;sub&gt;16&lt;/sub&gt;..DFFF&lt;sub&gt;16&lt;/sub&gt; are ill-formed)”라고 되어있기 때문입니다. 그리고 D89에 의해서 UFT-16에서 제외되었습니다.&lt;/p&gt;

&lt;p&gt;이런 문제를 해결하기 위해서, &lt;em&gt;unpaired surrogate code points를 단일 UTF-16 code unit으로 return 하는 대신, JSON escape sequenc로 표현&lt;/em&gt; 하는 것을 제안하고 있습니다. 아래의 코드에서 예시를 보여주고 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Non-BMP characters still serialize to surrogate pairs.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'𝌆'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// → '&quot;𝌆&quot;'&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;uD834&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;uDF06'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// → '&quot;𝌆&quot;'&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Unpaired surrogate code units will serialize to escape sequences.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;uDF06&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;uD834'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// → '&quot;\\udf06\\ud834&quot;'&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;uDEAD'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// → '&quot;\\udead&quot;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;현재,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;V8, enabled by default in V8 v7.2.10 and Chrome 72&lt;/li&gt;
  &lt;li&gt;SpiderMonkey, shipping in Firefox 64&lt;/li&gt;
  &lt;li&gt;JavaScriptCore, shipping in Safari Technology Preview 73
에 구현되어 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;stringprototypetrimstarttrimend&quot;&gt;String.prototype.{trimStart,trimEnd}&lt;/h3&gt;

&lt;p&gt;String type은 trim()이라는, 양쪽의 whitespace를 제거하는 method를 표준으로 가지고 있습니다. &lt;a href=&quot;https://github.com/tc39/proposal-string-left-right-trim&quot;&gt;해당 proposal&lt;/a&gt;은 string의 양쪽이 아닌 한쪽의 whitespace만 제거하는 trimStart()와 trimEnd()라는 method를 제안합니다.&lt;/p&gt;

&lt;p&gt;재미있는 점은, 해당 method는 표준에 제정되기 전에 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimEnd#Browser_compatibility&quot;&gt;여러 browser에서 이미 구현&lt;/a&gt; 되어 있습니다. Browser에서 ECMAScript로 기능을 넣게하는 경우 중 하나입니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;      My favorite sport &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;is kendo.        &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trimStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trimEnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;My favorite sport is kendo.&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;기능의 추가 외에도, naming/aliasing 도 제안하고 있습니다. ES2017에서 표준으로 추가된 &lt;strong&gt;padStart/padEnd&lt;/strong&gt;와 일관성을 유지하기 위해서 &lt;strong&gt;trimLeft/trimRight&lt;/strong&gt; 대신 &lt;strong&gt;trimStart/trimEnd&lt;/strong&gt;를 제안하고 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;arrayprototypeflatflatmap&quot;&gt;Array.prototype.{flat,flatMap}&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tc39/proposal-flatMap&quot;&gt;해당 proposal&lt;/a&gt;은 Array.prototype.flat과 Array.prototype.flatMap을 ECMAScript에 추가하려 합니다.&lt;/p&gt;

&lt;p&gt;flat()은 여러 depth를 가지는 array를 한 depth씩 혹은 여러 depth씩 평평하게(flatten) 합니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nestedArr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]]];&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;flat1Depth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nestedArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;flat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// == nestedArr.flat(); [1, 2, [3, [4]]]&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;flat2Depth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nestedArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;flat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [1, 2, 3, [4]]&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;flat3Depth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nestedArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;flat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [1, 2, 3, 4]&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;flatMoreDepth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nestedArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;flat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [1, 2, 3, 4]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;flatMap()은 map()과 유사하게 array를 return합니다. 하지만 flatMap은 return되는 array를 한 depth 평평하게 합니다.&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;example1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// example1 === [2, 4, 3, 6, 4, 8]&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;example2_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'I am'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'not a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'boy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)});&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// example2_1 === [[&quot;I&quot;, &quot;am&quot;], [&quot;not&quot;, &quot;a&quot;], [&quot;boy&quot;]]&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;example2_2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'I am'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'not a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'boy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)});&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// example2_2 === [&quot;I&quot;, &quot;am&quot;, &quot;not&quot;, &quot;a&quot;, &quot;boy&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ecma-international.org/publications/standards/Ecma-262.htm&quot;&gt;ECMAScript&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ecma-international.org/ecma-262/9.0/index.html&quot;&gt;ES2018&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tc39&quot;&gt;TC39&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tc39.github.io/process-document/&quot;&gt;The TC39 Process&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tc39/proposals&quot;&gt;ECMAScript Proposals&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ahnheejong.name/articles/ecmascript-tc39/&quot;&gt;ECMAScript와 TC39&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tc39/proposal-global&quot;&gt;globalThis&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tc39/proposal-dynamic-import&quot;&gt;import()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tc39/proposal-regexp-legacy-features&quot;&gt;Legacy RegExp features in JavaScript&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tc39/proposal-regexp-legacy-features/blob/master/subclass-restriction-motivation.md&quot;&gt;Why disable legacy RegExp features for proper subclasses of RegExp?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tc39/proposal-bigint&quot;&gt;BigInt: Arbitrary precision integers in JavaScript&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tc39/proposal-flatMap&quot;&gt;Array.prototype.{flat,flatMap}&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tc39/proposal-string-left-right-trim&quot;&gt;String.prototype.{trimStart,trimEnd}&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ljharb/String.prototype.matchAll&quot;&gt;String.prototype.matchAll&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tc39/proposal-optional-catch-binding&quot;&gt;Optional catch binding&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tc39/proposal-json-superset&quot;&gt;Subsume JSON(JSON superset)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tc39/proposal-Symbol-description&quot;&gt;Symbol.prototype.description&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tc39/Function-prototype-toString-revision&quot;&gt;Function.prototype.toString revision&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tc39/proposal-object-from-entries&quot;&gt;Object.fromEntries&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://lodash.com/docs/4.17.11#fromPairs&quot;&gt;fromPairt - lodash&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tc39/proposal-well-formed-stringify&quot;&gt;Well-formed JSON.stringify&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc8259#section-8.1&quot;&gt;RFC 8259 section 8.1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Heekyum</name></author><category term="javascript" /><summary type="html">이번 post에서는 2019년에 발표될 ES2019에 추가될 예정인 기능들에 대해서 살펴보겠습니다.</summary></entry><entry><title type="html">[html/css] Block element를 가로로 배치하는 방법 - display: inline-block</title><link href="https://shlrur.github.io//develog/2019/01/23/how-arrange-elements-horizontally-display-inline-block/" rel="alternate" type="text/html" title="[html/css] Block element를 가로로 배치하는 방법 - display: inline-block" /><published>2019-01-23T00:00:00+00:00</published><updated>2019-01-23T00:00:00+00:00</updated><id>https://shlrur.github.io//develog/2019/01/23/how-arrange-elements-horizontally-display-inline-block</id><content type="html" xml:base="https://shlrur.github.io//develog/2019/01/23/how-arrange-elements-horizontally-display-inline-block/">&lt;p&gt;이번 post에서는 &lt;strong&gt;display: inline-block&lt;/strong&gt; 를 이용한 block element를 가로로 배치하는 방법에 대해서 알아보겠습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;contents&quot;&gt;Contents&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#display-property&quot;&gt;display Property&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#using-display-inline-block&quot;&gt;Using display: inline-block&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#create-navigation-links&quot;&gt;Create Navigation Links&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#references&quot;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;display-property&quot;&gt;display Property&lt;/h1&gt;

&lt;p&gt;먼저, CSS에서 &lt;strong&gt;display&lt;/strong&gt;라는 속성이 가지는 값의 종류와 효과에 대해서 알아보겠습니다.&lt;/p&gt;

&lt;p&gt;dispaly 속성은 element가 보여주는 방식을 나타냅니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;inline&lt;/strong&gt;: Element를 &lt;span&gt;과 같이 inline element로 보여줍니다. 그래서 height와 width 속성은 적용되지 않습니다.&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;block&lt;/strong&gt;: Element를 &amp;lt;p&amp;gt;와 같이 block element로 보여줍니다. 그래서 새 line에서 시작하며, 전체 폭을 사용합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;contents&lt;/strong&gt;: Container를 없애고, element의 하위 element를 한 단계 위의 element로 설정합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;flex&lt;/strong&gt;: Element를 block-level의 flex container로 보여줍니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;grid&lt;/strong&gt;: Element를 block-level의 grid container로 보여줍니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;inline-block&lt;/strong&gt;: Element를 inline-level block container로 보여줍니다. Element는 inline element로 구성되지만, height와 width를 지정할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;inline-flex&lt;/strong&gt;: Element를 inline-level의 flex container로 보여줍니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;inline-grid&lt;/strong&gt;: Element를 inline-level의 grid container로 보여줍니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;inline-table&lt;/strong&gt;: Element를 inline-level의 table로 보여줍니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;list-item&lt;/strong&gt;: Element가 &amp;lt;li&amp;gt; element처럼 동작하게 합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;run-in&lt;/strong&gt;: element가 context에 따라서 block element나 inline element로 보여줍니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;table&lt;/strong&gt;: Element가 &amp;lt;table&amp;gt; element처럼 동작하게 합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;table-caption&lt;/strong&gt;: Element가 &amp;lt;caption&amp;gt; element처럼 동작하게 합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;table-column-group&lt;/strong&gt;: Element가 &amp;lt;colgroup&amp;gt; element처럼 동작하게 합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;table-header-group&lt;/strong&gt;: Element가 &amp;lt;thead&amp;gt; element처럼 동작하게 합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;table-footer-group&lt;/strong&gt;: Element가 &amp;lt;tfoot&amp;gt; element처럼 동작하게 합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;table-row-group&lt;/strong&gt;: Element가 &amp;lt;tbody&amp;gt; element처럼 동작하게 합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;table-cell&lt;/strong&gt;: Element가 &amp;lt;td&amp;gt; element처럼 동작하게 합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;table-column&lt;/strong&gt;: Element가 &amp;lt;col&amp;gt; element처럼 동작하게 합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;table-row&lt;/strong&gt;: Element가 &amp;lt;tr&amp;gt; element처럼 동작하게 합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;none&lt;/strong&gt;: Element를 완전히 제거합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;initial&lt;/strong&gt;: display 속성을 default값으로 설정합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;inherit&lt;/strong&gt;: display 속성을 부모 element의 display값으로 설정합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;using-display-inline-block&quot;&gt;Using display: inline-block&lt;/h1&gt;

&lt;p&gt;&lt;kbd&gt;display: inline&lt;/kbd&gt;와 비교했을 때 &lt;kbd&gt;display: inline-block&lt;/kbd&gt;의 가장 큰 차이점은 &lt;strong&gt;width와 height를 지정할 수 있다는 것&lt;/strong&gt;입니다. 또한, &lt;kbd&gt;display: inline-block&lt;/kbd&gt;은 상하 margin/padding이 적용됩니다.(&lt;kbd&gt;display: inline&lt;/kbd&gt;은 안됩니다)&lt;/p&gt;

&lt;p&gt;&lt;kbd&gt;display: block&lt;/kbd&gt;과 비교했을 때 가장 큰 차이점은, &lt;kbd&gt;display: inline-block&lt;/kbd&gt;은 element뒤에 line이 바뀌지 않기 때문에 옆으로 쭉 나열할 수 있다는 점입니다.&lt;/p&gt;

&lt;p&gt;아래의 예제에서는 &lt;kbd&gt;display: inline&lt;/kbd&gt;, &lt;kbd&gt;display: inline-block&lt;/kbd&gt; 그리고 &lt;kbd&gt;display: block&lt;/kbd&gt;을 보여주면서 차이점을 비교해 볼 수 있습니다.&lt;/p&gt;

&lt;p class=&quot;codepen&quot; data-height=&quot;265&quot; data-theme-id=&quot;light&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;shlrur&quot; data-slug-hash=&quot;vbEWMb&quot; style=&quot;height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;vbEWMb&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/shlrur/pen/vbEWMb/&quot;&gt;
  vbEWMb&lt;/a&gt; by Heekyum Kim (&lt;a href=&quot;https://codepen.io/shlrur&quot;&gt;@shlrur&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;create-navigation-links&quot;&gt;Create Navigation Links&lt;/h2&gt;

&lt;p&gt;&lt;kbd&gt;display: inline-block&lt;/kbd&gt;을 흔하게 사용하는 경우인 navigation link를 세로가 아닌 가로로 배치하는 경우에 대해서 살펴보겠습니다.&lt;/p&gt;

&lt;p class=&quot;codepen&quot; data-height=&quot;265&quot; data-theme-id=&quot;light&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;shlrur&quot; data-slug-hash=&quot;daPZxQ&quot; style=&quot;height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;daPZxQ&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/shlrur/pen/daPZxQ/&quot;&gt;
  daPZxQ&lt;/a&gt; by Heekyum Kim (&lt;a href=&quot;https://codepen.io/shlrur&quot;&gt;@shlrur&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.w3schools.com/cssref/pr_class_display.asp&quot;&gt;CSS display Property&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.w3schools.com/css/css_inline-block.asp&quot;&gt;CSS Layout - display: inline-block&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;</content><author><name>Heekyum</name></author><category term="etc" /><summary type="html">이번 post에서는 display: inline-block 를 이용한 block element를 가로로 배치하는 방법에 대해서 알아보겠습니다.</summary></entry><entry><title type="html">[html/css] Block element를 가로로 배치하는 방법 - Flexbox</title><link href="https://shlrur.github.io//develog/2019/01/23/how-arrange-elements-horizontally-flexbox/" rel="alternate" type="text/html" title="[html/css] Block element를 가로로 배치하는 방법 - Flexbox" /><published>2019-01-23T00:00:00+00:00</published><updated>2019-01-23T00:00:00+00:00</updated><id>https://shlrur.github.io//develog/2019/01/23/how-arrange-elements-horizontally-flexbox</id><content type="html" xml:base="https://shlrur.github.io//develog/2019/01/23/how-arrange-elements-horizontally-flexbox/">&lt;p&gt;이번 post에서는 &lt;strong&gt;Flexbox&lt;/strong&gt; 를 이용한 block element를 가로로 배치하는 방법에 대해서 알아보겠습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;contents&quot;&gt;Contents&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#flexbox-with-other-layout-modules&quot;&gt;Flexbox with Other Layout Modules&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-flexbox&quot;&gt;What is Flexbox&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#about-container-element&quot;&gt;About Container Element&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#the-flex-direction-property&quot;&gt;The flex-direction Property&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#the-flex-wrap-property&quot;&gt;The flex-wrap Property&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#the-flex-flow-property&quot;&gt;The flex-flow Property&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#the-justify-content-property&quot;&gt;The justify-content Property&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#the-align-items-property&quot;&gt;The align-items Property&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#the-align-content-property&quot;&gt;The align-content Property&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#perfect-centering&quot;&gt;Perfect Centering&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#about-child-elements&quot;&gt;About Child Elements&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#the-order-property&quot;&gt;The order Property&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#the-flex-grow-property&quot;&gt;The flex-grow Property&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#the-flex-shrink-property&quot;&gt;The flex-shrink Property&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#the-flex-basis-property&quot;&gt;The flex-basis Property&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#the-flex-property&quot;&gt;The flex Property&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#the-align-self-property&quot;&gt;The align-self Property&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#responsive-website-using-flexbox&quot;&gt;Responsive Website using Flexbox&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#references&quot;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;flexbox-with-other-layout-modules&quot;&gt;Flexbox with Other Layout Modules&lt;/h1&gt;

&lt;p&gt;일반적으로 4가지의 layout을 설정하는 방법이 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;webpage의 section 정의를 위한 &lt;em&gt;Block&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;text를 위한 &lt;em&gt;Inline&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;2차원(가로, 세로) table data를 위한 &lt;em&gt;Table&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;element의 위치를 명확히 지정하기 위한 &lt;em&gt;Positioned&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Flexible Box Layout Module&lt;/strong&gt; 은 float나 positioning 없이 쉽게 flexible responsive layout 구조를 구현할 수 있게 합니다.&lt;/p&gt;

&lt;p&gt;2019년 1월 현재 &lt;a href=&quot;https://caniuse.com/#feat=flexbox&quot;&gt;Flexible Box Layout Module의 호환성&lt;/a&gt;은 IE11에서 부분적으로 지원하는 것 외에 다른 브라우저의 최신버전에서는 모두 지원하고 있습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;what-is-flexbox&quot;&gt;What is Flexbox&lt;/h1&gt;

&lt;p&gt;Flexbox를 자세히 살펴보기 전에, flexbox를 사용한 간단한 예제를 한번 보겠습니다.&lt;/p&gt;

&lt;p class=&quot;codepen&quot; data-height=&quot;265&quot; data-theme-id=&quot;light&quot; data-default-tab=&quot;css,result&quot; data-user=&quot;shlrur&quot; data-slug-hash=&quot;NoPJbm&quot; style=&quot;height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;NoPJbm&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/shlrur/pen/NoPJbm/&quot;&gt;
  NoPJbm&lt;/a&gt; by Heekyum Kim (&lt;a href=&quot;https://codepen.io/shlrur&quot;&gt;@shlrur&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위의 예제는 3개의 block-level element를 &lt;em&gt;flex-container&lt;/em&gt; 라는 class를 가지는 container element로 감싸고 있습니다. Container element에는 &lt;kbd&gt;display: flex&lt;/kbd&gt; 만 적용되었고, 그로 인해서 3개의 block-level element가 가로로 배치되었습니다.&lt;/p&gt;

&lt;p&gt;이제 flex 속성의 여러 설정들을 예제를 통해서 알아보겠습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;about-container-element&quot;&gt;About Container Element&lt;/h1&gt;

&lt;p&gt;Container element는 &lt;em&gt;layout을 설정하려는 element들을 감싸고 있는 element&lt;/em&gt; 를 뜻합니다.(위의 예제에서 파란 배경을 뜻합니다.) Container element에서 flex를 이용해서 자식 element들의 layout을 설정하려면, &lt;kbd&gt;display: flex&lt;/kbd&gt; 처럼 display 속성에 flex값을 사용해야 합니다.&lt;/p&gt;

&lt;p&gt;이렇게 지정된 &lt;strong&gt;flex conationer element&lt;/strong&gt;는 다음과 같은 속성들을 설정할 수 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;flex-direction&lt;/li&gt;
  &lt;li&gt;flex-wrap&lt;/li&gt;
  &lt;li&gt;flex-flow&lt;/li&gt;
  &lt;li&gt;justify-content&lt;/li&gt;
  &lt;li&gt;align-items&lt;/li&gt;
  &lt;li&gt;align-content&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;아래에서 해당 속성들에 대해 예제와 함께 자세히 알아보겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;the-flex-direction-property&quot;&gt;The &lt;strong&gt;flex-direction&lt;/strong&gt; Property&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;flex-direction&lt;/strong&gt; 속성은 container element내의 element들이 어느 방향으로 배치될지를 결정합니다. &lt;strong&gt;column&lt;/strong&gt;, &lt;strong&gt;column-reverse&lt;/strong&gt;, &lt;strong&gt;row&lt;/strong&gt;, &lt;strong&gt;row-reverse&lt;/strong&gt;의 값을 가집니다. 아래의 코드를 통해서 각각의 값이 어떤 작용을 하는지 알 수 있습니다.&lt;/p&gt;

&lt;p class=&quot;codepen&quot; data-height=&quot;265&quot; data-theme-id=&quot;light&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;shlrur&quot; data-slug-hash=&quot;xMbeKW&quot; style=&quot;height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;xMbeKW&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/shlrur/pen/xMbeKW/&quot;&gt;
  xMbeKW&lt;/a&gt; by Heekyum Kim (&lt;a href=&quot;https://codepen.io/shlrur&quot;&gt;@shlrur&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-flex-wrap-property&quot;&gt;The &lt;strong&gt;flex-wrap&lt;/strong&gt; Property&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;flex-wrap&lt;/strong&gt; 속성은 flex item들이 wrap 되도록 혹은 안되도록 결정합니다.&lt;/p&gt;

&lt;p&gt;아래의 예제는 12개의 flex item이 &lt;strong&gt;flex-wrap&lt;/strong&gt; 속성에 따라서 어떻게 배치되는지 보여줍니다. &lt;strong&gt;nowrap&lt;/strong&gt;이 기본값입니다.&lt;/p&gt;

&lt;p class=&quot;codepen&quot; data-height=&quot;265&quot; data-theme-id=&quot;light&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;shlrur&quot; data-slug-hash=&quot;KJwLqx&quot; style=&quot;height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;KJwLqx&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/shlrur/pen/KJwLqx/&quot;&gt;
  KJwLqx&lt;/a&gt; by Heekyum Kim (&lt;a href=&quot;https://codepen.io/shlrur&quot;&gt;@shlrur&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-flex-flow-property&quot;&gt;The &lt;strong&gt;flex-flow&lt;/strong&gt; Property&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;flex-flow&lt;/strong&gt; 는 &lt;strong&gt;flex-direction&lt;/strong&gt; 과 &lt;strong&gt;flex-wrap&lt;/strong&gt; 속성을 동시에 설정할 수 있는 속성입니다.&lt;/p&gt;

&lt;p&gt;예를들어, &lt;kbd&gt;flex-flow: row wrap;&lt;/kbd&gt;는 &lt;kbd&gt;flex-direction: row; flex-wrap: wrap&lt;/kbd&gt;와 같은 의미입니다.&lt;/p&gt;

&lt;h2 id=&quot;the-justify-content-property&quot;&gt;The &lt;strong&gt;justify-content&lt;/strong&gt; Property&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;justify-content&lt;/strong&gt; 속성은 flex item들을 정렬(align)할 때 사용합니다. &lt;strong&gt;flex-start&lt;/strong&gt;가 기본값입니다.&lt;/p&gt;

&lt;p class=&quot;codepen&quot; data-height=&quot;265&quot; data-theme-id=&quot;light&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;shlrur&quot; data-slug-hash=&quot;MLYdvZ&quot; style=&quot;height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;MLYdvZ&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/shlrur/pen/MLYdvZ/&quot;&gt;
  MLYdvZ&lt;/a&gt; by Heekyum Kim (&lt;a href=&quot;https://codepen.io/shlrur&quot;&gt;@shlrur&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-align-items-property&quot;&gt;The &lt;strong&gt;align-items&lt;/strong&gt; Property&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;align-items&lt;/strong&gt; 속성은 flex item들의 세로정렬을 결정합니다. &lt;strong&gt;stretch&lt;/strong&gt;가 기본값입니다.&lt;/p&gt;

&lt;p class=&quot;codepen&quot; data-height=&quot;265&quot; data-theme-id=&quot;light&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;shlrur&quot; data-slug-hash=&quot;QYwRXY&quot; style=&quot;height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;QYwRXY&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/shlrur/pen/QYwRXY/&quot;&gt;
  QYwRXY&lt;/a&gt; by Heekyum Kim (&lt;a href=&quot;https://codepen.io/shlrur&quot;&gt;@shlrur&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;5개의 속성 값 중에서 &lt;strong&gt;baseline&lt;/strong&gt;은 약간 직관적이지 않습니다. &lt;strong&gt;baseline&lt;/strong&gt;은 flex item 내에 있는 사이즈가 다른 font의 baseline(red line)에 맞춰집니다.&lt;/p&gt;

&lt;h2 id=&quot;the-align-content-property&quot;&gt;The &lt;strong&gt;align-content&lt;/strong&gt; Property&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;align-content&lt;/strong&gt;는 flex line을 정렬할 때 사용합니다.&lt;/p&gt;

&lt;p class=&quot;codepen&quot; data-height=&quot;265&quot; data-theme-id=&quot;light&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;shlrur&quot; data-slug-hash=&quot;qgEzzY&quot; style=&quot;height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;qgEzzY&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/shlrur/pen/qgEzzY/&quot;&gt;
  qgEzzY&lt;/a&gt; by Heekyum Kim (&lt;a href=&quot;https://codepen.io/shlrur&quot;&gt;@shlrur&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;perfect-centering&quot;&gt;Perfect Centering&lt;/h2&gt;

&lt;p&gt;그러면, 가장 흔한 style problem인 가로 세로 완전 중간에 element를 놓는 방법이 뭘까요?&lt;/p&gt;

&lt;p&gt;정답은, flex item의 세로 정렬을 결정하는 &lt;strong&gt;justify-content&lt;/strong&gt;와 가로 정렬을 결정하는 &lt;strong&gt;align-items&lt;/strong&gt;의 값을 &lt;strong&gt;center&lt;/strong&gt;로 하는 것입니다. 그러면 해당 flex item은 정확히 flex container의 중앙에 위치하게 됩니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;about-child-elements&quot;&gt;About Child Elements&lt;/h1&gt;

&lt;p&gt;위에서 살펴본 &lt;strong&gt;Flex Container&lt;/strong&gt;의 바로 아래에 위치하는 element들을 &lt;strong&gt;Flex(flexible) Items&lt;/strong&gt;라고 합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flex Items&lt;/strong&gt;은 아래의 속성들을 설정할 수 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;order&lt;/li&gt;
  &lt;li&gt;flex-grow&lt;/li&gt;
  &lt;li&gt;flex-shrink&lt;/li&gt;
  &lt;li&gt;flex-basis&lt;/li&gt;
  &lt;li&gt;flex&lt;/li&gt;
  &lt;li&gt;align-self&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;아래에서 해당 속성들에 대해 예제와 함께 자세히 알아보겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;the-order-property&quot;&gt;The order Property&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;order&lt;/strong&gt; 속성은 각 flex item들의 &lt;strong&gt;순서&lt;/strong&gt;를 나타냅니다.
그러므로 value는 number여야 하며, default는 0입니다.&lt;/p&gt;

&lt;p class=&quot;codepen&quot; data-height=&quot;265&quot; data-theme-id=&quot;light&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;shlrur&quot; data-slug-hash=&quot;qgdYry&quot; style=&quot;height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;qgdYry&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/shlrur/pen/qgdYry/&quot;&gt;
  qgdYry&lt;/a&gt; by Heekyum Kim (&lt;a href=&quot;https://codepen.io/shlrur&quot;&gt;@shlrur&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-flex-grow-property&quot;&gt;The flex-grow Property&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;flex-grow&lt;/strong&gt; 속성은 각 flex item들의 &lt;strong&gt;길이&lt;/strong&gt;를 나타내는 비율이라고 할 수 있습니다.
그러므로 value는 숫자여야 하고 default value는 0입니다.&lt;/p&gt;

&lt;p class=&quot;codepen&quot; data-height=&quot;306&quot; data-theme-id=&quot;light&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;shlrur&quot; data-slug-hash=&quot;LqVmyJ&quot; style=&quot;height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;LqVmyJ&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/shlrur/pen/LqVmyJ/&quot;&gt;
  LqVmyJ&lt;/a&gt; by Heekyum Kim (&lt;a href=&quot;https://codepen.io/shlrur&quot;&gt;@shlrur&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-flex-shrink-property&quot;&gt;The flex-shrink Property&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;flex-shrink&lt;/strong&gt; 속성은 각 flex item들이 각자 얼마나 &lt;strong&gt;수축&lt;/strong&gt; 할 것인지를 비율로 나타냅니다.
역시 value는 숫자여야 하며 default value는 1입니다.&lt;/p&gt;

&lt;p class=&quot;codepen&quot; data-height=&quot;265&quot; data-theme-id=&quot;light&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;shlrur&quot; data-slug-hash=&quot;daoeRw&quot; style=&quot;height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;daoeRw&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/shlrur/pen/daoeRw/&quot;&gt;
  daoeRw&lt;/a&gt; by Heekyum Kim (&lt;a href=&quot;https://codepen.io/shlrur&quot;&gt;@shlrur&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-flex-basis-property&quot;&gt;The flex-basis Property&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;flex-basis&lt;/strong&gt; 속성은 각 flex item의 처음 길이를 지정합니다.&lt;/p&gt;

&lt;p class=&quot;codepen&quot; data-height=&quot;265&quot; data-theme-id=&quot;light&quot; data-default-tab=&quot;css,result&quot; data-user=&quot;shlrur&quot; data-slug-hash=&quot;qgdYxJ&quot; style=&quot;height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;qgdYxJ&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/shlrur/pen/qgdYxJ/&quot;&gt;
  qgdYxJ&lt;/a&gt; by Heekyum Kim (&lt;a href=&quot;https://codepen.io/shlrur&quot;&gt;@shlrur&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-flex-property&quot;&gt;The flex Property&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;flex&lt;/strong&gt;는 &lt;strong&gt;flex-grow&lt;/strong&gt;, &lt;strong&gt;flex-shrink&lt;/strong&gt;, 그리고 &lt;strong&gt;flex-basis&lt;/strong&gt; 속성을 동시에 설정할 수 있는 속성입니다.&lt;/p&gt;

&lt;p&gt;예를들어, &lt;kbd&gt;flex: 0 0 200px&lt;/kbd&gt;는 growable 하지 않고(0), shrinkable 하지 않으며(0) 초기 길이는 200pixel 이라는 뜻입니다.&lt;/p&gt;

&lt;h2 id=&quot;the-align-self-property&quot;&gt;The align-self Property&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;align-self&lt;/strong&gt; 속성은 flex item의 세로정렬을 결정합니다.&lt;/p&gt;

&lt;p&gt;그런데, flex item들의 세로 정렬은 flex container의 &lt;strong&gt;align-items&lt;/strong&gt;를 통해서도 한번에 설정 가능합니다.
&lt;strong&gt;align-self&lt;/strong&gt; 속성은 flex container의 &lt;strong&gt;align-items&lt;/strong&gt;를 override 해서 각 flex item에 가로정렬 값을 설정할 수 있는 것입니다.&lt;/p&gt;

&lt;p class=&quot;codepen&quot; data-height=&quot;265&quot; data-theme-id=&quot;light&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;shlrur&quot; data-slug-hash=&quot;PVqeXZ&quot; style=&quot;height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;PVqeXZ&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/shlrur/pen/PVqeXZ/&quot;&gt;
  PVqeXZ&lt;/a&gt; by Heekyum Kim (&lt;a href=&quot;https://codepen.io/shlrur&quot;&gt;@shlrur&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;responsive-website-using-flexbox&quot;&gt;Responsive Website using Flexbox&lt;/h1&gt;

&lt;p&gt;그럼 지금까지 공부한 flex의 여러 속성들을 사용해서 reponsive wesite를 만들어 보겠습니다.&lt;/p&gt;

&lt;p&gt;해당 website는 &lt;em&gt;width: 700px&lt;/em&gt; 을 기점으로,
&lt;em&gt;width &amp;lt; 700px&lt;/em&gt; 일 때는 mobile을 위해서 element들이 세로로 배치되고,
&lt;em&gt;width &amp;gt; 700px&lt;/em&gt; 일 때는 PC로 보기 편한 배치가 됩니다. Link인 a tag들은 inline-level element이기 때문에 가로로 배치되고, About Me와 TITLE HEADING 은 block-level인 div tag지만 container에서 display: flex 를 설정했기 때문에 가로로 배치되어 있습니다.&lt;/p&gt;

&lt;p&gt;아래의 코드는 &lt;em&gt;CODEPEN&lt;/em&gt; 배너를 누른 후 큰 창에서 보시길 추천드립니다.&lt;/p&gt;

&lt;p class=&quot;codepen&quot; data-height=&quot;265&quot; data-theme-id=&quot;light&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;shlrur&quot; data-slug-hash=&quot;mvJKde&quot; style=&quot;height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;mvJKde&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/shlrur/pen/mvJKde/&quot;&gt;
  mvJKde&lt;/a&gt; by Heekyum Kim (&lt;a href=&quot;https://codepen.io/shlrur&quot;&gt;@shlrur&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.w3schools.com/css/css3_flexbox.asp&quot;&gt;CSS Flexbox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;</content><author><name>Heekyum</name></author><category term="etc" /><summary type="html">이번 post에서는 Flexbox 를 이용한 block element를 가로로 배치하는 방법에 대해서 알아보겠습니다.</summary></entry><entry><title type="html">[html/css] Block element를 가로로 배치하는 방법 - float</title><link href="https://shlrur.github.io//develog/2019/01/18/how-arrange-elements-horizontally-float/" rel="alternate" type="text/html" title="[html/css] Block element를 가로로 배치하는 방법 - float" /><published>2019-01-18T00:00:00+00:00</published><updated>2019-01-18T00:00:00+00:00</updated><id>https://shlrur.github.io//develog/2019/01/18/how-arrange-elements-horizontally-float</id><content type="html" xml:base="https://shlrur.github.io//develog/2019/01/18/how-arrange-elements-horizontally-float/">&lt;p&gt;이번 post에서는 &lt;strong&gt;float&lt;/strong&gt; 를 이용한 block element를 가로로 배치하는 방법에 대해서 알아보겠습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;contents&quot;&gt;Contents&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#using-float&quot;&gt;Using Float&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#the-clear-property&quot;&gt;The clear Property&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#the-clearfix-hack&quot;&gt;The clearfix Hack&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#layout&quot;&gt;Layout&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#references&quot;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;using-float&quot;&gt;Using Float&lt;/h1&gt;

&lt;p&gt;Float property는 원래 text와 함께 image를 보여줄 때, image를 어떻게 띄워서(float) 배치할 것인지를 설정하기 위한 것이지만, 현재는 layout을 배치할 때 주로 사용됩니다.
Float property는 다음과 같은 값을 가질 수 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;left: 해당 element의 container의 왼쪽에 띄워서 배치합니다.&lt;/li&gt;
  &lt;li&gt;right: 해당 element의 container의 오른쪽에 띄워서 배치합니다.&lt;/li&gt;
  &lt;li&gt;none: 해당 element가 띄워지지 않습니다. 단지 원래 있어야 할 자리에 위치합니다. default 값입니다.&lt;/li&gt;
  &lt;li&gt;inherit: 해당 element는 자신의 부모와 같은 float값을 가집니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p data-height=&quot;265&quot; data-theme-id=&quot;light&quot; data-slug-hash=&quot;rooLyW&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;shlrur&quot; data-pen-title=&quot;rooLyW&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/shlrur/pen/rooLyW/&quot;&gt;rooLyW&lt;/a&gt; by Heekyum Kim (&lt;a href=&quot;https://codepen.io/shlrur&quot;&gt;@shlrur&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-clear-property&quot;&gt;The clear Property&lt;/h2&gt;

&lt;p&gt;Clear property는 float property를 사용할 때 함께 사용하는 property로서, 해당 element의 왼쪽, 오른쪽 혹은 양쪽에 다른 element가 올 수 있는지 없는지를 결정합니다.
Clear property는 다음과 같은 값을 가질 수 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;none: 양쪽모두 element들이 float할 수 있습니다. default 값입니다.&lt;/li&gt;
  &lt;li&gt;left: 해당 element의 왼쪽에 element들이 float할 수 없습니다.&lt;/li&gt;
  &lt;li&gt;right: 해당 element의 오른쪽에 element들이 float할 수 없습니다.&lt;/li&gt;
  &lt;li&gt;both: 양쪽모두 element들이 float할 수 없습니다.&lt;/li&gt;
  &lt;li&gt;inherit: 해당 element는 자신의 부모와 같은 clear값을 가집니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Clear property는 float property를 사용한 후 가장 흔하게 사용합니다.&lt;/p&gt;

&lt;p&gt;Float에 clear를 할 때, float에 맞춰서 clear를 잘 사용해야 합니다. 무슨 말이냐면, &lt;em&gt;A element&lt;/em&gt; 를 왼쪽으로 float 시키려면, 다음 element인 &lt;em&gt;B element&lt;/em&gt; 의 왼쪽을 clear 해야 합니다. 그러면 &lt;em&gt;A element&lt;/em&gt; 는 왼쪽에 float 되고 clear 된 &lt;em&gt;B element&lt;/em&gt; 는 아래에 위치하게 될 것입니다.&lt;/p&gt;

&lt;p class=&quot;codepen&quot; data-height=&quot;265&quot; data-theme-id=&quot;light&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;shlrur&quot; data-slug-hash=&quot;XoLVzb&quot; style=&quot;height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;XoLVzb&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/shlrur/pen/XoLVzb/&quot;&gt;
  XoLVzb&lt;/a&gt; by Heekyum Kim (&lt;a href=&quot;https://codepen.io/shlrur&quot;&gt;@shlrur&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-clearfix-hack&quot;&gt;The clearfix Hack&lt;/h2&gt;

&lt;p&gt;만약 어떤 float element가 자신을 감싸고 있는 container element보다 높이가 클때는(taller), container element의 바깥으로 &lt;em&gt;overflow&lt;/em&gt; 됩니다.&lt;/p&gt;

&lt;p&gt;그럴때는 아래 코드와 같이 &lt;kbd&gt;overflow: auto;&lt;/kbd&gt;를 사용합니다.&lt;/p&gt;

&lt;p class=&quot;codepen&quot; data-height=&quot;265&quot; data-theme-id=&quot;light&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;shlrur&quot; data-slug-hash=&quot;EraXRw&quot; style=&quot;height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;EraXRw&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/shlrur/pen/EraXRw/&quot;&gt;
  EraXRw&lt;/a&gt; by Heekyum Kim (&lt;a href=&quot;https://codepen.io/shlrur&quot;&gt;@shlrur&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;kbd&gt;overflow: auto;&lt;/kbd&gt; clearfix는 margin과 padding을 적절히 사용한다면 잘 작동합니다.&lt;/p&gt;

&lt;p&gt;아래의 코드는 &lt;kbd&gt;::after&lt;/kbd&gt;를 사용하는 최근의 clearfix로서, 더 안정적으로 사용할 수 있습니다.&lt;/p&gt;

&lt;p class=&quot;codepen&quot; data-height=&quot;265&quot; data-theme-id=&quot;light&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;shlrur&quot; data-slug-hash=&quot;RvNZwm&quot; style=&quot;height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;RvNZwm&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/shlrur/pen/RvNZwm/&quot;&gt;
  RvNZwm&lt;/a&gt; by Heekyum Kim (&lt;a href=&quot;https://codepen.io/shlrur&quot;&gt;@shlrur&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;layout&quot;&gt;Layout&lt;/h2&gt;

&lt;p class=&quot;codepen&quot; data-height=&quot;265&quot; data-theme-id=&quot;light&quot; data-default-tab=&quot;css,result&quot; data-user=&quot;shlrur&quot; data-slug-hash=&quot;jdELLw&quot; style=&quot;height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;jdELLw&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/shlrur/pen/jdELLw/&quot;&gt;
  jdELLw&lt;/a&gt; by Heekyum Kim (&lt;a href=&quot;https://codepen.io/shlrur&quot;&gt;@shlrur&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위의 코드는 &lt;strong&gt;float&lt;/strong&gt;를 사용해서 layout을 정의한 것입니다.&lt;/p&gt;

&lt;p&gt;header-menu의 li tag를 float를 사용해서 horizontally하게 배치하고 있습니다.
그리고 .clearfix::after 를 사용해서 &lt;kbd&gt;.column .menu&lt;/kbd&gt;와 &lt;kbd&gt;.column .content&lt;/kbd&gt;를 horizontally하게 배열하고 있습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.w3schools.com/css/css_float.asp&quot;&gt;CSS Layout - float and clear&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;</content><author><name>Heekyum</name></author><category term="etc" /><summary type="html">이번 post에서는 float 를 이용한 block element를 가로로 배치하는 방법에 대해서 알아보겠습니다.</summary></entry><entry><title type="html">[html/css] Block element를 가로로 배치하는 방법 - 시작</title><link href="https://shlrur.github.io//develog/2019/01/12/how-arrange-elements-horizontally-preview/" rel="alternate" type="text/html" title="[html/css] Block element를 가로로 배치하는 방법 - 시작" /><published>2019-01-12T00:00:00+00:00</published><updated>2019-01-12T00:00:00+00:00</updated><id>https://shlrur.github.io//develog/2019/01/12/how-arrange-elements-horizontally-preview</id><content type="html" xml:base="https://shlrur.github.io//develog/2019/01/12/how-arrange-elements-horizontally-preview/">&lt;p&gt;이번 post에서는 float, display, flex, grid 등을 이용한 block element를 가로로 배치하는 방법에 대해서 알아보겠습니다. Bootstrap4 와 같이 모든 속성이 정의되어 있고 element의 class만 지정해서 layout을 잡는 방법도 있지만, 이번 series에서는 순수하게 html과 css만을 사용해서 layout을 배치하는 방법에 대해서 알아보겠습니다.&lt;/p&gt;

&lt;p&gt;제가 처음 HTML과 CSS를 공부할 때 가장 먼저 맞닥뜨린 문제가 있었습니다. 바로 &lt;strong&gt;div&lt;/strong&gt; element를 가로로 배치하는 것이었습다. 그때는 &lt;em&gt;block&lt;/em&gt; 혹은 &lt;em&gt;inline&lt;/em&gt; 에 대한 개념이 없을때라, &lt;strong&gt;div&lt;/strong&gt; 같은 &lt;em&gt;block&lt;/em&gt; element를 어떻게 가로로 배치해야 하는지에 대해서 알지 못했습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이번 post에서는 HTML의 가장 기본적 요소인 &lt;em&gt;block&lt;/em&gt; 과 &lt;em&gt;inline&lt;/em&gt; 에 대해서 알아보겠습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;contents&quot;&gt;Contents&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#block-and-inline&quot;&gt;Block and inline&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#block-level-elements&quot;&gt;Block Level Elements&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#inline-level-elements&quot;&gt;Inline Level Elements&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#continue&quot;&gt;Continue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;block-and-inline&quot;&gt;Block and Inline&lt;/h1&gt;

&lt;p&gt;HTML의 모든 element는 자신이 가지는 기본 display type이 있습니다. 대부분의 element가 가지는 기본 display type은 &lt;strong&gt;block&lt;/strong&gt; 혹은 &lt;strong&gt;inline&lt;/strong&gt; 입니다.&lt;/p&gt;

&lt;h2 id=&quot;block-level-elements&quot;&gt;Block Level Elements&lt;/h2&gt;

&lt;p&gt;Block-level element는 항상 새로운 line에 위치하며, 가능한 전체 폭을 사용합니다.
Block-level 에 해당하는 element는 다음과 같습니다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;address&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;article&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;aside&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;blockquote&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;canvas&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;dd&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;dl&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;dt&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;fieldset&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;figcaption&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;figure&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;footer&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;form&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;-&lt;span class=&quot;nt&quot;&gt;&amp;lt;h6&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;header&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;main&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;nav&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;noscript&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;ol&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;output&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;pre&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;section&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;table&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;tfoot&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;video&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;the-div-element&quot;&gt;The &lt;strong&gt;div&lt;/strong&gt; Element&lt;/h3&gt;

&lt;p data-height=&quot;265&quot; data-theme-id=&quot;light&quot; data-slug-hash=&quot;WLLwxJ&quot; data-default-tab=&quot;result&quot; data-user=&quot;shlrur&quot; data-pen-title=&quot;WLLwxJ&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/shlrur/pen/WLLwxJ/&quot;&gt;WLLwxJ&lt;/a&gt; by Heekyum Kim (&lt;a href=&quot;https://codepen.io/shlrur&quot;&gt;@shlrur&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;div element는 가장 대표적인 block type element&lt;/strong&gt;로서, container로 사용됩니다.
&lt;em&gt;div&lt;/em&gt; element는 class, id 그리고 style 외에 따로 필요한 attribute는 없습니다.
CSS와 함께 사용될 때는 &lt;em&gt;div&lt;/em&gt; element 내의 element 들에게 style을 적용합니다.&lt;/p&gt;

&lt;h2 id=&quot;inline-level-elements&quot;&gt;Inline Level Elements&lt;/h2&gt;

&lt;p&gt;Inline-level element는 새로운 line에서 시작하지 않으며, 필요한 만큼의 폭만 사용합니다.
Inline-level 에 해당하는 element는 다음과 같습니다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;abbr&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;acronym&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;b&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;bdo&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;big&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;cite&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;code&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;dfn&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;em&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;i&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;kbd&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;label&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;map&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;object&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;q&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;samp&amp;gt;&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textarea&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;the-span-element&quot;&gt;The &lt;strong&gt;span&lt;/strong&gt; Element&lt;/h3&gt;

&lt;p data-height=&quot;265&quot; data-theme-id=&quot;light&quot; data-slug-hash=&quot;BvvKMO&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;shlrur&quot; data-pen-title=&quot;BvvKMO&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/shlrur/pen/BvvKMO/&quot;&gt;BvvKMO&lt;/a&gt; by Heekyum Kim (&lt;a href=&quot;https://codepen.io/shlrur&quot;&gt;@shlrur&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;span element는 가장 대표적인 inline type element&lt;/strong&gt;로서, 주로 text의 container로 사용됩니다.
&lt;em&gt;span&lt;/em&gt; element역시 class, id 그리고 style 외에 따로 필요한 attribute는 없습니다.
CSS와 함께 사용될 때는 &lt;em&gt;span&lt;/em&gt; element 내의 text에 style을 적용합니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;continue&quot;&gt;Continue&lt;/h1&gt;

&lt;p&gt;다음 post 부터는 여러 방법을 사용하여 block elements를 가로로 배치하는 방법에 대해서 알아보겠습니다.
비교적 예전에 사용하던 기술부터 살펴보겠습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.w3schools.com/html/html_blocks.asp&quot;&gt;HTML Block and Inline Elements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;</content><author><name>Heekyum</name></author><category term="etc" /><summary type="html">이번 post에서는 float, display, flex, grid 등을 이용한 block element를 가로로 배치하는 방법에 대해서 알아보겠습니다. Bootstrap4 와 같이 모든 속성이 정의되어 있고 element의 class만 지정해서 layout을 잡는 방법도 있지만, 이번 series에서는 순수하게 html과 css만을 사용해서 layout을 배치하는 방법에 대해서 알아보겠습니다.</summary></entry><entry><title type="html">[Jekyll] 나의 Jekyll template 제작기 - 3(final)</title><link href="https://shlrur.github.io//develog/2019/01/01/jekyll-template-story-3/" rel="alternate" type="text/html" title="[Jekyll] 나의 Jekyll template 제작기 - 3(final)" /><published>2019-01-01T00:00:00+00:00</published><updated>2019-01-01T00:00:00+00:00</updated><id>https://shlrur.github.io//develog/2019/01/01/jekyll-template-story-3</id><content type="html" xml:base="https://shlrur.github.io//develog/2019/01/01/jekyll-template-story-3/">&lt;p&gt;Jekyll은 github에서 제공하는 static website generator입니다. Github repository에 jekyll blog를 위한 code를 push하면, github가 static website를 만들어줍니다. 이 때에, &lt;a href=&quot;https://pages.github.com/versions/&quot;&gt;github에서 제공하는 dependency&lt;/a&gt;는 한정되어 있습니다. 바꿔말하면, 여기서 제공하지 않는 dependency는 사용할 수 없다는 뜻입니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/develog/2018/11/24/jekyll-template-story-2/&quot;&gt;이전 편&lt;/a&gt;에서는 제가 원하는 요구사항에 맞춰서 blog theme을 만드는 과정을 보여드렸습니다. &lt;a href=&quot;https://mmistakes.github.io/jekyll-theme-basically-basic/&quot;&gt;Basically Basic&lt;/a&gt; theme에서, &lt;a href=&quot;https://isme2n.github.io/&quot;&gt;Aiden 님의 블로그&lt;/a&gt;의 category와 tag를 사용해서 post를 구분하는 개념을 사용하여, &lt;a href=&quot;https://github.com/sverrirs/jekyll-paginate-v2&quot;&gt;jekyll-paginate-v2&lt;/a&gt; plugin을 적용해서 blog를 제작하는데 성공하였습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;하지만, 해당 결과물을 blog 생성을 위한 &lt;a href=&quot;https://github.com/shlrur/first-blog.maker&quot;&gt;github repository&lt;/a&gt;에 push 했을 때 jekyll blog가 제대로 작동하지 않았습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;contents&quot;&gt;Contents&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#the-problem&quot;&gt;The Problem&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#solution&quot;&gt;Solution&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#_site-folder&quot;&gt;_site Folder&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#solutions-for-using-jekyll-paginate-v2&quot;&gt;Solutions for Using Jekyll-Paginate-V2&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#using-ci&quot;&gt;Using CI&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#solutions-for-using-troublesome-task&quot;&gt;Solutions for Using Troublesome Task&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#git-submodule-생성&quot;&gt;Git submodule 생성&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#travis에-github-repository-연결&quot;&gt;Travis에 Github repository 연결&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#token-생성&quot;&gt;Token 생성&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#config-파일-설정&quot;&gt;Config 파일 설정&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;the-problem&quot;&gt;The Problem&lt;/h1&gt;

&lt;p&gt;결론부터 말하자면, &lt;a href=&quot;https://github.com/sverrirs/jekyll-paginate-v2&quot;&gt;jekyll-paginate-v2&lt;/a&gt; plugin은 실제 github에서 생성되는 static website에서는 동작하지 않습니다. &lt;a href=&quot;https://pages.github.com/versions/&quot;&gt;github에서 제공하는 dependency&lt;/a&gt;에 포함되어 있지 않기 때문입니다.&lt;/p&gt;

&lt;p&gt;그러면 방법이 없을까요? &lt;strong&gt;방법은 있습니다!&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;solution&quot;&gt;Solution&lt;/h1&gt;

&lt;h2 id=&quot;_site-folder&quot;&gt;_site Folder&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;This is where the generated site will be placed (by default) once Jekyll is done transforming it. It’s probably a good idea to add this to your .gitignore file.(&lt;a href=&quot;https://jekyllrb.com/docs/structure/&quot;&gt;description of _site folder&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;_site&lt;/strong&gt; folder는 &lt;strong&gt;Jekyll&lt;/strong&gt;로 build 된 파일들이 저장되어있는 곳입니다. &lt;strong&gt;jekyll serve&lt;/strong&gt; 명령어로 local에서 볼 수 있는 블로그 화면은 &lt;strong&gt;_site&lt;/strong&gt; folder에 있는 파일들을 보는 것이죠. 여기서 해결책이 생깁니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Local에서는 jekyll-paginate-v2가 제대로 동작되어서 _site folder의 결과물이 생성되었다.&lt;/li&gt;
  &lt;li&gt;Github에서는 jekyll-paginate-v2가 무시되어서 블로그가 build 되었다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;예 맞습니다. &lt;strong&gt;Github에서 build하게 하지말고, local에서 생성된 _site folder를 바로 repository에 올리면 됩니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;solutions-for-using-jekyll-paginate-v2&quot;&gt;Solutions for Using Jekyll-Paginate-V2&lt;/h2&gt;

&lt;p&gt;위의 방법을 사용하기 위해서는 2개의 repository가 필요합니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;기존의, .md 파일로 작성한 blog post를 올리던 repository.&lt;/li&gt;
  &lt;li&gt;새로 필요한, 1. 의 _site folder를 저장할 repository.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;저는 기존의 repository인 &lt;a href=&quot;https://github.com/shlrur/shlrur.github.io&quot;&gt;shlrur.github.io&lt;/a&gt; 의 파일들을 &lt;a href=&quot;https://github.com/shlrur/first-blog.maker&quot;&gt;first-blog.maker&lt;/a&gt;라는, 새로 만든 repository에 옮겼습니다.&lt;/p&gt;

&lt;p&gt;그리고 &lt;a href=&quot;https://github.com/shlrur/first-blog.maker&quot;&gt;first-blog.maker&lt;/a&gt;에서 생성되는 &lt;strong&gt;_site folder&lt;/strong&gt;의 내용을 &lt;a href=&quot;https://github.com/shlrur/shlrur.github.io&quot;&gt;shlrur.github.io&lt;/a&gt;에 올려서 &lt;a href=&quot;https://shlrur.github.io/&quot;&gt;https://shlrur.github.io/&lt;/a&gt; 주소로 blog에 접속할 수 있도록 하였습니다.&lt;/p&gt;

&lt;p&gt;이 방법을 사용하면 jekyll-paginate-v2를 blog의 구조 생성에 사용할 수 있습니다. &lt;strong&gt;하지만, 관리해야 할 repository가 하나 늘었고, commit/push 횟수도 늘어났습니다.&lt;/strong&gt; 하나의 문제를 해결하기 위해서 귀찮은 작업이 추가되어 버렸습니다.&lt;/p&gt;

&lt;h2 id=&quot;using-ci&quot;&gt;Using CI&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://codeship.com/continuous-integration-essentials&quot;&gt;CI(Continous Integration)&lt;/a&gt;를 사용해서 위의 과정을 자동으로 처리해 보겠습니다.&lt;/p&gt;

&lt;p&gt;CI 툴로는 &lt;a href=&quot;https://jenkins.io/&quot;&gt;Jenkins&lt;/a&gt;, &lt;a href=&quot;https://travis-ci.org/&quot;&gt;Travis&lt;/a&gt; 등이 있습니다.&lt;/p&gt;

&lt;p&gt;Jenkins는 회사에서 frontend와 backend를 통합한 CI로 사용했는데, 설치형이기 때문에 따로 서버가 필요합니다. 저는 CI를 위해서 따로 서버를 사용할 생각은 없기 때문에 Jenkins는 사용하지 않기로 했습니다.&lt;/p&gt;

&lt;p&gt;Travis는 Github와 연동하는데 편리하고, public repository에 대해서는 무료로 사용할 수 있다는 장점이 있습니다. 그리고 Travis Server를 이용하기 때문에 따로 서버가 필요하지도 않습니다.&lt;/p&gt;

&lt;p&gt;그래서 저는 Travis를 사용하기로 했습니다.&lt;/p&gt;

&lt;h2 id=&quot;solutions-for-using-troublesome-task&quot;&gt;Solutions for Using Troublesome Task&lt;/h2&gt;

&lt;p&gt;Travis CI를 사용해서 하려는 작업은,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/shlrur/first-blog.maker&quot;&gt;first-blog.maker&lt;/a&gt; repository의 내용을 commit 및 push 했을 때, 해당 내용을 자동으로 build하고, build된 결과물인 _site folder의 내용물을 &lt;a href=&quot;https://github.com/shlrur/shlrur.github.io&quot;&gt;shlrur.github.io&lt;/a&gt; repository에 commit 및 push한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;입니다. 그럼 찬찬히 과정을 따라가 보겠습니다. 아래의 과정을 따라가기 전에, &lt;a href=&quot;https://github.com/shlrur/first-blog.maker&quot;&gt;first-blog.maker&lt;/a&gt; repository에 해당하는 repository를 본인의 pc에 clone 해 놓으셔야 합니다. 저의 repository를 예로 들어서 설명을 하겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;git-submodule-생성&quot;&gt;Git submodule 생성&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/shlrur/first-blog.maker&quot;&gt;first-blog.maker&lt;/a&gt; repository와 &lt;a href=&quot;https://github.com/shlrur/shlrur.github.io&quot;&gt;shlrur.github.io&lt;/a&gt; repository를 git submodule로 묶습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/shlrur/first-blog.maker&quot;&gt;first-blog.maker&lt;/a&gt; repository를 clone 한 경로에서 다음과 같이 command를 입력합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;git submodule add https://github.com/shlrur/shlrur.github.io exampleoutputname&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그러면, &lt;a href=&quot;https://github.com/shlrur/first-blog.maker&quot;&gt;first-blog.maker&lt;/a&gt; repository의 하위에 &lt;kbd&gt;exampleoutputname&lt;/kbd&gt;이라는 이름의 folder가 만들어지고 이 폴더는 &lt;a href=&quot;https://github.com/shlrur/shlrur.github.io&quot;&gt;shlrur.github.io&lt;/a&gt; repository에 대한 local git repository가 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;kbd&gt;exampleoutputname&lt;/kbd&gt; 이라는 이름은 맘에 드는걸로 사용하시면 됩니다. 단, &lt;kbd&gt;_config.yml&lt;/kbd&gt;에 있는 &lt;strong&gt;destination&lt;/strong&gt; property의 값과 같아야 합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;destination: ./exampleoutputname&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;정상적으로 clone이 진행되어서 submodule이 생성되면 command창에 다음과 같이 입력합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;git submodule update&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;travis에-github-repository-연결&quot;&gt;Travis에 Github repository 연결&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://travis-ci.org&quot;&gt;Travis 사이트&lt;/a&gt;에 접속해서 GitHub Repository에 대한 연결을 활성화합니다.&lt;/p&gt;

&lt;p&gt;기본적으로 Public Repository만 사용할 수 있으며, Private Repository를 사용하고 싶으면 &lt;a href=&quot;https://travis-ci.com&quot;&gt;다른 주소를 가지는 Travis 사이트&lt;/a&gt;에서 별도의 비용을 지불해야 합니다.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;img src=&quot;https://shlrur.github.io//assets/images/jekyll-template-story-3/0_enabled_repository.png&quot; alt=&quot;enabled repository&quot; /&gt;
    &lt;figcaption&gt;enabled repository&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;위의 그림과 같이, 필요한 repository 2개를 Enabled 상태로 바꿔줍니다.&lt;/p&gt;

&lt;p&gt;잠깐 정리하자만, &lt;a href=&quot;https://github.com/shlrur/first-blog.maker&quot;&gt;first-blog.maker&lt;/a&gt; repository에 push가 이루어지면 Travis CI가 &lt;kbd&gt;.travis.yml&lt;/kbd&gt; 설정파일의 내용을 토대로 특정 작업을 수행하게 됩니다. &lt;kbd&gt;.travis.yml&lt;/kbd&gt; 의 작성은 조금 아래에서 알아보겠습니다.&lt;/p&gt;

&lt;p&gt;우리는 이 &lt;kbd&gt;.travis.yml&lt;/kbd&gt;과 &lt;kbd&gt;Rakefile&lt;/kbd&gt;을 이용하여 &lt;kbd&gt;exampleoutputname&lt;/kbd&gt;안에 있는 내용을 commit하고 push하게 될 것입니다. &lt;kbd&gt;exampleoutputname&lt;/kbd&gt;은 &lt;a href=&quot;https://github.com/shlrur/shlrur.github.io&quot;&gt;shlrur.github.io&lt;/a&gt;와 연동되는 repository이기 때문에 결국, Jekyll로 컴파일한 내용이 GitHub Page Repository로 들어가게 되는 겁니다.&lt;/p&gt;

&lt;h3 id=&quot;token-생성&quot;&gt;Token 생성&lt;/h3&gt;

&lt;p&gt;Travis CI에서 다른 Repository(&lt;a href=&quot;https://github.com/shlrur/shlrur.github.io&quot;&gt;shlrur.github.io&lt;/a&gt;)로 push를 하기 위해서는 token이 필요합니다.&lt;/p&gt;

&lt;p&gt;GitHub에 접속해 Setting &amp;gt; Developer settings &amp;gt; Personal access tokens에 들어가서 Generate New Token을 클릭합니다. 적당히 description을 작성하고 Select scopes 중 repo 선택하고 generate token을 클릭하면 새로운 token이 생성 됩니다. 이 token을 바로 이용할 건 아니기 때문에 어딘가에 잘 저장해 둡니다.&lt;/p&gt;

&lt;p&gt;이 token값을 직접 Travis CI 설정파일( .travis.yml )에 직접 노출시키면 안되고 이 값을 암호화해서 사용해야 합니다.
일단 command 창을 열어서 travis gem을 설치합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;gem install travis&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;설치가 끝나면 다음의 명령을 이용해서 암호화를 진행합니다. 만약 로그인을 안했다는 메시지가 나오면 다음과 같이 로그인 후 진행하시면 됩니다. (ID/PW는 GitHub의 ID/PW를 이용합니다.)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;travis login –pro
travis encrypt GITHUB_TOKEN=&lt;token&gt; -r &lt;repo-name&gt;&lt;/repo-name&gt;&lt;/token&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;여기서 &lt;token&gt;에는 아까 우리가 획득한 GitHub token을 넣어주시면 됩니다. &lt;repo-name&gt;부분에는 우리의 Jekyll Source Folder에 대한 Repository이름을 주면 됩니다. 주의하실점은 {ID/RepoName} 형태로 사용하셔야 합니다. 저의 경우를 예로 들자면 다음과 같습니다.&lt;/repo-name&gt;&lt;/token&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;travis encrypt GITHUB_TOKEN=123abc456xxx -r shlrur/first-blog.maker&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위의 과정을 거치면 암호화된 값을 얻을 수 있는데 이 값을 아래와 같이 .travis.yml안에 설정하시면 됩니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;env:
  global:
    secure: &quot;Insert an encrypted value here.&quot;
branches:
  only:
    - master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;config-파일-설정&quot;&gt;Config 파일 설정&lt;/h3&gt;

&lt;p&gt;이제 &lt;kbd&gt;_config.yml&lt;/kbd&gt;, &lt;kbd&gt;.travis.yml&lt;/kbd&gt;, &lt;kbd&gt;Rakefile&lt;/kbd&gt; 파일을 아래와 같이 적절하게 수정해야 합니다. Ruby언어로 작성된 script를 보는게 영 껄끄럽지만 어렵지 않는 내용이니 천천히 보시면 됩니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# _config.yml
# for Travis CI. (shit custom gem api...) ##################
destination: ./exampleoutputname

production_url: https://shlrur.github.io/
source_url: https://github.com/shlrur/first-blog.maker

safe: False
lsi: False

username: shlrur
repo: first-blog.maker
branch: master
############################################################
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# .travis.yml
sudo: false
language: ruby
cache: bundler
rvm:
- 2.4.2

install:
  # Install Jekyll and dependencies
  - bundle install

before_script:
  - git config --global user.email &quot;shlrur123@gmail.com&quot;
  - git config --global user.name &quot;shlrur&quot;

script: bundle exec rake site:deploy --quiet #--trace

# Generate your secure token with the travis gem:
# get Github token from your Travis CI profile page
# gem install travis
# GH_TOKEN from https://github.com/settings/tokens
# travis encrypt 'GIT_NAME=&quot;YOUR_USERNAME&quot; GIT_EMAIL=&quot;YOUR_EMAIL&quot; GH_TOKEN=YOUR_TOKEN'
env:
  global:
    secure: &quot;ssssssssssssss&quot;
branches:
  only:
    - master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Rakefile
#############################################################################
#
# Modified version of jekyllrb Rakefile
# https://github.com/jekyll/jekyll/blob/master/Rakefile
#
#############################################################################

require 'rake'
require 'date'
require 'yaml'

CONFIG = YAML.load(File.read('_config.yml'))
USERNAME = CONFIG[&quot;username&quot;]
REPO = CONFIG[&quot;repo&quot;]
SOURCE_BRANCH = CONFIG[&quot;branch&quot;]
DESTINATION_BRANCH = &quot;master&quot;

def check_destination
  unless Dir.exist? CONFIG[&quot;destination&quot;]
    sh &quot;git clone https://$GIT_NAME:$GITHUB_TOKEN@github.com/#{USERNAME}/#{REPO}.git #{CONFIG[&quot;destination&quot;]}&quot;
  end
end

namespace :site do
  desc &quot;Generate the site&quot;
  task :build do
    check_destination
    sh &quot;bundle exec jekyll build&quot;
  end

  desc &quot;Generate the site and serve locally&quot;
  task :serve do
    check_destination
    sh &quot;bundle exec jekyll serve&quot;
  end

  desc &quot;Generate the site, serve locally and watch for changes&quot;
  task :watch do
    sh &quot;bundle exec jekyll serve --watch&quot;
  end

  desc &quot;Generate the site and push changes to remote origin&quot;
  task :deploy do
    # Detect pull request
    if ENV['TRAVIS_PULL_REQUEST'].to_s.to_i &amp;gt; 0
      puts 'Pull request detected. Not proceeding with deploy.'
      exit
    end

    # Configure git if this is run in Travis CI
    if ENV[&quot;TRAVIS&quot;]
      sh &quot;git config --global user.name $GIT_NAME&quot;
      sh &quot;git config --global user.email $GIT_EMAIL&quot;
      sh &quot;git config --global push.default simple&quot;
    end

    # Make sure destination folder exists as git repo
    check_destination

    sh &quot;git checkout #{SOURCE_BRANCH}&quot;
    Dir.chdir(CONFIG[&quot;destination&quot;]) { sh &quot;git checkout #{DESTINATION_BRANCH}&quot; }

    # Generate the site
    sh &quot;bundle exec jekyll build&quot;

    # Commit and push to github
    sha = `git log`.match(/[a-z0-9]{40}/)[0]
    Dir.chdir(CONFIG[&quot;destination&quot;]) do
      # check if there is anything to add and commit, and pushes it
      sh &quot;if [ -n '$(git status)' ]; then
            git add --all .;
            git commit -m 'Updating to #{USERNAME}/#{REPO}@#{sha}.';
            git push https://$GITHUB_TOKEN@github.com/#{USERNAME}/#{USERNAME}.github.io.git #{DESTINATION_BRANCH} --quiet ;
         fi&quot;
      puts &quot;Pushed updated branch #{DESTINATION_BRANCH} to GitHub Pages&quot;
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;모든 설정이 끝났습니다. 이제 &lt;a href=&quot;https://github.com/shlrur/first-blog.maker&quot;&gt;first-blog.maker&lt;/a&gt; repository에서 push작업을 해 보시면 Travis CI가 동작하면서 내부적으로 처리해서 결과를 알려줍니다. 해보시면 아시겠지만 거의 스팸메일처럼 날라옵니다.&lt;/p&gt;

&lt;p&gt;Travis CI 사이트에 들어가면 CI Server가 어떻게 처리하는지를 실시간적으로 log를 출력해 보여주는데 그걸 보시면서 혹 문제가 있는 부분이 있으면 해결하시면 됩니다.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
    &lt;img src=&quot;https://shlrur.github.io//assets/images/jekyll-template-story-3/1_build-screen.png&quot; alt=&quot;building screen&quot; /&gt;
    &lt;figcaption&gt;building screen&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;3편에 걸쳐서, 저만의 블로그를 만들면서 겪었던 시행착오에 대해서 말씀드리고 해결했던 방법들을 보여드렸습니다.&lt;/p&gt;

&lt;p&gt;블로그를 만들면서 어떠한 이유로 막혔던 순간과 어떻게 해결했는지에 대한 내용을 정리해 보고 싶었습니다.&lt;/p&gt;

&lt;p&gt;Jekyll Blog는 비교적 어려운 방법이기 때문에 사용하는 사람이 많지 않습니다. 하지만 매우 매력적인 방법입니다. Jekyll을 사용해서 blog를 만드는 분들 중에 저와 같은 문제에 부딪힌 분들에게 이 포스트들이 도움이 되었으면 합니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://pages.github.com/versions/&quot;&gt;Github Pages Dependency Versions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://travis-ci.org&quot;&gt;Travis CI&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://moon9342.github.io/jekyll-travis-ci-public&quot;&gt;Jekyll 기반의 GitHub Page 생성(8)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Heekyum</name></author><category term="etc" /><summary type="html">Jekyll은 github에서 제공하는 static website generator입니다. Github repository에 jekyll blog를 위한 code를 push하면, github가 static website를 만들어줍니다. 이 때에, github에서 제공하는 dependency는 한정되어 있습니다. 바꿔말하면, 여기서 제공하지 않는 dependency는 사용할 수 없다는 뜻입니다.</summary></entry><entry><title type="html">2018-12-28 Workout Log: kendo</title><link href="https://shlrur.github.io//workout/2018/12/28/workout-log-kendo/" rel="alternate" type="text/html" title="2018-12-28 Workout Log: kendo" /><published>2018-12-28T00:00:00+00:00</published><updated>2018-12-28T00:00:00+00:00</updated><id>https://shlrur.github.io//workout/2018/12/28/workout-log-kendo</id><content type="html" xml:base="https://shlrur.github.io//workout/2018/12/28/workout-log-kendo/">&lt;blockquote class=&quot;instagram-media&quot; data-instgrm-captioned=&quot;&quot; data-instgrm-permalink=&quot;https://www.instagram.com/p/Br7spIGAMig/?utm_source=ig_embed&amp;amp;utm_medium=loading&quot; data-instgrm-version=&quot;12&quot; style=&quot; background:#FFF; border:0; border-radius:3px; box-shadow:0 0 1px 0 rgba(0,0,0,0.5),0 1px 10px 0 rgba(0,0,0,0.15); margin: 1px; max-width:658px; min-width:326px; padding:0; width:99.375%; width:-webkit-calc(100% - 2px); width:calc(100% - 2px);&quot;&gt;&lt;div style=&quot;padding:16px;&quot;&gt; &lt;a href=&quot;https://www.instagram.com/p/Br7spIGAMig/?utm_source=ig_embed&amp;amp;utm_medium=loading&quot; style=&quot; background:#FFFFFF; line-height:0; padding:0 0; text-align:center; text-decoration:none; width:100%;&quot; target=&quot;_blank&quot;&gt; &lt;div style=&quot; display: flex; flex-direction: row; align-items: center;&quot;&gt; &lt;div style=&quot;background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 40px; margin-right: 14px; width: 40px;&quot;&gt;&lt;/div&gt; &lt;div style=&quot;display: flex; flex-direction: column; flex-grow: 1; justify-content: center;&quot;&gt; &lt;div style=&quot; background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 100px;&quot;&gt;&lt;/div&gt; &lt;div style=&quot; background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 60px;&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;padding: 19% 0;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;display:block; height:50px; margin:0 auto 12px; width:50px;&quot;&gt;&lt;svg width=&quot;50px&quot; height=&quot;50px&quot; viewBox=&quot;0 0 60 60&quot; version=&quot;1.1&quot; xmlns=&quot;https://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;https://www.w3.org/1999/xlink&quot;&gt;&lt;g stroke=&quot;none&quot; stroke-width=&quot;1&quot; fill=&quot;none&quot; fill-rule=&quot;evenodd&quot;&gt;&lt;g transform=&quot;translate(-511.000000, -20.000000)&quot; fill=&quot;#000000&quot;&gt;&lt;g&gt;&lt;path d=&quot;M556.869,30.41 C554.814,30.41 553.148,32.076 553.148,34.131 C553.148,36.186 554.814,37.852 556.869,37.852 C558.924,37.852 560.59,36.186 560.59,34.131 C560.59,32.076 558.924,30.41 556.869,30.41 M541,60.657 C535.114,60.657 530.342,55.887 530.342,50 C530.342,44.114 535.114,39.342 541,39.342 C546.887,39.342 551.658,44.114 551.658,50 C551.658,55.887 546.887,60.657 541,60.657 M541,33.886 C532.1,33.886 524.886,41.1 524.886,50 C524.886,58.899 532.1,66.113 541,66.113 C549.9,66.113 557.115,58.899 557.115,50 C557.115,41.1 549.9,33.886 541,33.886 M565.378,62.101 C565.244,65.022 564.756,66.606 564.346,67.663 C563.803,69.06 563.154,70.057 562.106,71.106 C561.058,72.155 560.06,72.803 558.662,73.347 C557.607,73.757 556.021,74.244 553.102,74.378 C549.944,74.521 548.997,74.552 541,74.552 C533.003,74.552 532.056,74.521 528.898,74.378 C525.979,74.244 524.393,73.757 523.338,73.347 C521.94,72.803 520.942,72.155 519.894,71.106 C518.846,70.057 518.197,69.06 517.654,67.663 C517.244,66.606 516.755,65.022 516.623,62.101 C516.479,58.943 516.448,57.996 516.448,50 C516.448,42.003 516.479,41.056 516.623,37.899 C516.755,34.978 517.244,33.391 517.654,32.338 C518.197,30.938 518.846,29.942 519.894,28.894 C520.942,27.846 521.94,27.196 523.338,26.654 C524.393,26.244 525.979,25.756 528.898,25.623 C532.057,25.479 533.004,25.448 541,25.448 C548.997,25.448 549.943,25.479 553.102,25.623 C556.021,25.756 557.607,26.244 558.662,26.654 C560.06,27.196 561.058,27.846 562.106,28.894 C563.154,29.942 563.803,30.938 564.346,32.338 C564.756,33.391 565.244,34.978 565.378,37.899 C565.522,41.056 565.552,42.003 565.552,50 C565.552,57.996 565.522,58.943 565.378,62.101 M570.82,37.631 C570.674,34.438 570.167,32.258 569.425,30.349 C568.659,28.377 567.633,26.702 565.965,25.035 C564.297,23.368 562.623,22.342 560.652,21.575 C558.743,20.834 556.562,20.326 553.369,20.18 C550.169,20.033 549.148,20 541,20 C532.853,20 531.831,20.033 528.631,20.18 C525.438,20.326 523.257,20.834 521.349,21.575 C519.376,22.342 517.703,23.368 516.035,25.035 C514.368,26.702 513.342,28.377 512.574,30.349 C511.834,32.258 511.326,34.438 511.181,37.631 C511.035,40.831 511,41.851 511,50 C511,58.147 511.035,59.17 511.181,62.369 C511.326,65.562 511.834,67.743 512.574,69.651 C513.342,71.625 514.368,73.296 516.035,74.965 C517.703,76.634 519.376,77.658 521.349,78.425 C523.257,79.167 525.438,79.673 528.631,79.82 C531.831,79.965 532.853,80.001 541,80.001 C549.148,80.001 550.169,79.965 553.369,79.82 C556.562,79.673 558.743,79.167 560.652,78.425 C562.623,77.658 564.297,76.634 565.965,74.965 C567.633,73.296 568.659,71.625 569.425,69.651 C570.167,67.743 570.674,65.562 570.82,62.369 C570.966,59.17 571,58.147 571,50 C571,41.851 570.966,40.831 570.82,37.631&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div style=&quot;padding-top: 8px;&quot;&gt; &lt;div style=&quot; color:#3897f0; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:550; line-height:18px;&quot;&gt; View this post on Instagram&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;padding: 12.5% 0;&quot;&gt;&lt;/div&gt; &lt;div style=&quot;display: flex; flex-direction: row; margin-bottom: 14px; align-items: center;&quot;&gt;&lt;div&gt; &lt;div style=&quot;background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(0px) translateY(7px);&quot;&gt;&lt;/div&gt; &lt;div style=&quot;background-color: #F4F4F4; height: 12.5px; transform: rotate(-45deg) translateX(3px) translateY(1px); width: 12.5px; flex-grow: 0; margin-right: 14px; margin-left: 2px;&quot;&gt;&lt;/div&gt; &lt;div style=&quot;background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(9px) translateY(-18px);&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;margin-left: 8px;&quot;&gt; &lt;div style=&quot; background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 20px; width: 20px;&quot;&gt;&lt;/div&gt; &lt;div style=&quot; width: 0; height: 0; border-top: 2px solid transparent; border-left: 6px solid #f4f4f4; border-bottom: 2px solid transparent; transform: translateX(16px) translateY(-4px) rotate(30deg)&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;margin-left: auto;&quot;&gt; &lt;div style=&quot; width: 0px; border-top: 8px solid #F4F4F4; border-right: 8px solid transparent; transform: translateY(16px);&quot;&gt;&lt;/div&gt; &lt;div style=&quot; background-color: #F4F4F4; flex-grow: 0; height: 12px; width: 16px; transform: translateY(-4px);&quot;&gt;&lt;/div&gt; &lt;div style=&quot; width: 0; height: 0; border-top: 8px solid #F4F4F4; border-left: 8px solid transparent; transform: translateY(-4px) translateX(8px);&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/a&gt; &lt;p style=&quot; margin:8px 0 0 0; padding:0 4px;&quot;&gt; &lt;a href=&quot;https://www.instagram.com/p/Br7spIGAMig/?utm_source=ig_embed&amp;amp;utm_medium=loading&quot; style=&quot; color:#000; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px; text-decoration:none; word-wrap:break-word;&quot; target=&quot;_blank&quot;&gt;#운동 #매일운동 #저녁운동 #dailyworkout - #kendo #검도 #머리치기왕대회 #2등 #luckypoint&lt;/a&gt;&lt;/p&gt; &lt;p style=&quot; color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; line-height:17px; margin-bottom:0; margin-top:8px; overflow:hidden; padding:8px 0 7px; text-align:center; text-overflow:ellipsis; white-space:nowrap;&quot;&gt;A post shared by &lt;a href=&quot;https://www.instagram.com/dochaebi/?utm_source=ig_embed&amp;amp;utm_medium=loading&quot; style=&quot; color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px;&quot; target=&quot;_blank&quot;&gt; #kendo #검도 #strength&lt;/a&gt; (@dochaebi) on &lt;time style=&quot; font-family:Arial,sans-serif; font-size:14px; line-height:17px;&quot; datetime=&quot;2018-12-28T13:31:29+00:00&quot;&gt;Dec 28, 2018 at 5:31am PST&lt;/time&gt;&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//www.instagram.com/embed.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;instgrm.Embeds.process()&lt;/script&gt;</content><author><name>Heekyum</name></author><category term="kendo" /><summary type="html">View this post on Instagram #운동 #매일운동 #저녁운동 #dailyworkout - #kendo #검도 #머리치기왕대회 #2등 #luckypoint A post shared by #kendo #검도 #strength (@dochaebi) on Dec 28, 2018 at 5:31am PST</summary></entry><entry><title type="html">2018-12-24 Workout Log: strength</title><link href="https://shlrur.github.io//workout/2018/12/24/workout-log-strength/" rel="alternate" type="text/html" title="2018-12-24 Workout Log: strength" /><published>2018-12-24T00:00:00+00:00</published><updated>2018-12-24T00:00:00+00:00</updated><id>https://shlrur.github.io//workout/2018/12/24/workout-log-strength</id><content type="html" xml:base="https://shlrur.github.io//workout/2018/12/24/workout-log-strength/">&lt;blockquote class=&quot;instagram-media&quot; data-instgrm-captioned=&quot;&quot; data-instgrm-permalink=&quot;https://www.instagram.com/p/Brv9E-EAblM/?utm_source=ig_embed&amp;amp;utm_medium=loading&quot; data-instgrm-version=&quot;12&quot; style=&quot; background:#FFF; border:0; border-radius:3px; box-shadow:0 0 1px 0 rgba(0,0,0,0.5),0 1px 10px 0 rgba(0,0,0,0.15); margin: 1px; max-width:658px; min-width:326px; padding:0; width:99.375%; width:-webkit-calc(100% - 2px); width:calc(100% - 2px);&quot;&gt;&lt;div style=&quot;padding:16px;&quot;&gt; &lt;a href=&quot;https://www.instagram.com/p/Brv9E-EAblM/?utm_source=ig_embed&amp;amp;utm_medium=loading&quot; style=&quot; background:#FFFFFF; line-height:0; padding:0 0; text-align:center; text-decoration:none; width:100%;&quot; target=&quot;_blank&quot;&gt; &lt;div style=&quot; display: flex; flex-direction: row; align-items: center;&quot;&gt; &lt;div style=&quot;background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 40px; margin-right: 14px; width: 40px;&quot;&gt;&lt;/div&gt; &lt;div style=&quot;display: flex; flex-direction: column; flex-grow: 1; justify-content: center;&quot;&gt; &lt;div style=&quot; background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 100px;&quot;&gt;&lt;/div&gt; &lt;div style=&quot; background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 60px;&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;padding: 19% 0;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;display:block; height:50px; margin:0 auto 12px; width:50px;&quot;&gt;&lt;svg width=&quot;50px&quot; height=&quot;50px&quot; viewBox=&quot;0 0 60 60&quot; version=&quot;1.1&quot; xmlns=&quot;https://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;https://www.w3.org/1999/xlink&quot;&gt;&lt;g stroke=&quot;none&quot; stroke-width=&quot;1&quot; fill=&quot;none&quot; fill-rule=&quot;evenodd&quot;&gt;&lt;g transform=&quot;translate(-511.000000, -20.000000)&quot; fill=&quot;#000000&quot;&gt;&lt;g&gt;&lt;path d=&quot;M556.869,30.41 C554.814,30.41 553.148,32.076 553.148,34.131 C553.148,36.186 554.814,37.852 556.869,37.852 C558.924,37.852 560.59,36.186 560.59,34.131 C560.59,32.076 558.924,30.41 556.869,30.41 M541,60.657 C535.114,60.657 530.342,55.887 530.342,50 C530.342,44.114 535.114,39.342 541,39.342 C546.887,39.342 551.658,44.114 551.658,50 C551.658,55.887 546.887,60.657 541,60.657 M541,33.886 C532.1,33.886 524.886,41.1 524.886,50 C524.886,58.899 532.1,66.113 541,66.113 C549.9,66.113 557.115,58.899 557.115,50 C557.115,41.1 549.9,33.886 541,33.886 M565.378,62.101 C565.244,65.022 564.756,66.606 564.346,67.663 C563.803,69.06 563.154,70.057 562.106,71.106 C561.058,72.155 560.06,72.803 558.662,73.347 C557.607,73.757 556.021,74.244 553.102,74.378 C549.944,74.521 548.997,74.552 541,74.552 C533.003,74.552 532.056,74.521 528.898,74.378 C525.979,74.244 524.393,73.757 523.338,73.347 C521.94,72.803 520.942,72.155 519.894,71.106 C518.846,70.057 518.197,69.06 517.654,67.663 C517.244,66.606 516.755,65.022 516.623,62.101 C516.479,58.943 516.448,57.996 516.448,50 C516.448,42.003 516.479,41.056 516.623,37.899 C516.755,34.978 517.244,33.391 517.654,32.338 C518.197,30.938 518.846,29.942 519.894,28.894 C520.942,27.846 521.94,27.196 523.338,26.654 C524.393,26.244 525.979,25.756 528.898,25.623 C532.057,25.479 533.004,25.448 541,25.448 C548.997,25.448 549.943,25.479 553.102,25.623 C556.021,25.756 557.607,26.244 558.662,26.654 C560.06,27.196 561.058,27.846 562.106,28.894 C563.154,29.942 563.803,30.938 564.346,32.338 C564.756,33.391 565.244,34.978 565.378,37.899 C565.522,41.056 565.552,42.003 565.552,50 C565.552,57.996 565.522,58.943 565.378,62.101 M570.82,37.631 C570.674,34.438 570.167,32.258 569.425,30.349 C568.659,28.377 567.633,26.702 565.965,25.035 C564.297,23.368 562.623,22.342 560.652,21.575 C558.743,20.834 556.562,20.326 553.369,20.18 C550.169,20.033 549.148,20 541,20 C532.853,20 531.831,20.033 528.631,20.18 C525.438,20.326 523.257,20.834 521.349,21.575 C519.376,22.342 517.703,23.368 516.035,25.035 C514.368,26.702 513.342,28.377 512.574,30.349 C511.834,32.258 511.326,34.438 511.181,37.631 C511.035,40.831 511,41.851 511,50 C511,58.147 511.035,59.17 511.181,62.369 C511.326,65.562 511.834,67.743 512.574,69.651 C513.342,71.625 514.368,73.296 516.035,74.965 C517.703,76.634 519.376,77.658 521.349,78.425 C523.257,79.167 525.438,79.673 528.631,79.82 C531.831,79.965 532.853,80.001 541,80.001 C549.148,80.001 550.169,79.965 553.369,79.82 C556.562,79.673 558.743,79.167 560.652,78.425 C562.623,77.658 564.297,76.634 565.965,74.965 C567.633,73.296 568.659,71.625 569.425,69.651 C570.167,67.743 570.674,65.562 570.82,62.369 C570.966,59.17 571,58.147 571,50 C571,41.851 570.966,40.831 570.82,37.631&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div style=&quot;padding-top: 8px;&quot;&gt; &lt;div style=&quot; color:#3897f0; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:550; line-height:18px;&quot;&gt; View this post on Instagram&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;padding: 12.5% 0;&quot;&gt;&lt;/div&gt; &lt;div style=&quot;display: flex; flex-direction: row; margin-bottom: 14px; align-items: center;&quot;&gt;&lt;div&gt; &lt;div style=&quot;background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(0px) translateY(7px);&quot;&gt;&lt;/div&gt; &lt;div style=&quot;background-color: #F4F4F4; height: 12.5px; transform: rotate(-45deg) translateX(3px) translateY(1px); width: 12.5px; flex-grow: 0; margin-right: 14px; margin-left: 2px;&quot;&gt;&lt;/div&gt; &lt;div style=&quot;background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(9px) translateY(-18px);&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;margin-left: 8px;&quot;&gt; &lt;div style=&quot; background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 20px; width: 20px;&quot;&gt;&lt;/div&gt; &lt;div style=&quot; width: 0; height: 0; border-top: 2px solid transparent; border-left: 6px solid #f4f4f4; border-bottom: 2px solid transparent; transform: translateX(16px) translateY(-4px) rotate(30deg)&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;margin-left: auto;&quot;&gt; &lt;div style=&quot; width: 0px; border-top: 8px solid #F4F4F4; border-right: 8px solid transparent; transform: translateY(16px);&quot;&gt;&lt;/div&gt; &lt;div style=&quot; background-color: #F4F4F4; flex-grow: 0; height: 12px; width: 16px; transform: translateY(-4px);&quot;&gt;&lt;/div&gt; &lt;div style=&quot; width: 0; height: 0; border-top: 8px solid #F4F4F4; border-left: 8px solid transparent; transform: translateY(-4px) translateX(8px);&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/a&gt; &lt;p style=&quot; margin:8px 0 0 0; padding:0 4px;&quot;&gt; &lt;a href=&quot;https://www.instagram.com/p/Brv9E-EAblM/?utm_source=ig_embed&amp;amp;utm_medium=loading&quot; style=&quot; color:#000; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px; text-decoration:none; word-wrap:break-word;&quot; target=&quot;_blank&quot;&gt;#운동 #매일운동 #아침운동 #dailyworkout #strength -  #squat #스쿼트 80kg 5x5 호텔 헬스장에서 처음 운동해본다. 프리웨이트 운동하기에 그렇게 좋은 환경은 아님.&lt;/a&gt;&lt;/p&gt; &lt;p style=&quot; color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; line-height:17px; margin-bottom:0; margin-top:8px; overflow:hidden; padding:8px 0 7px; text-align:center; text-overflow:ellipsis; white-space:nowrap;&quot;&gt;A post shared by &lt;a href=&quot;https://www.instagram.com/dochaebi/?utm_source=ig_embed&amp;amp;utm_medium=loading&quot; style=&quot; color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px;&quot; target=&quot;_blank&quot;&gt; #kendo #검도 #strength&lt;/a&gt; (@dochaebi) on &lt;time style=&quot; font-family:Arial,sans-serif; font-size:14px; line-height:17px;&quot; datetime=&quot;2018-12-24T00:04:12+00:00&quot;&gt;Dec 23, 2018 at 4:04pm PST&lt;/time&gt;&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//www.instagram.com/embed.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;instgrm.Embeds.process()&lt;/script&gt;</content><author><name>Heekyum</name></author><category term="strength" /><summary type="html">View this post on Instagram #운동 #매일운동 #아침운동 #dailyworkout #strength - #squat #스쿼트 80kg 5x5 호텔 헬스장에서 처음 운동해본다. 프리웨이트 운동하기에 그렇게 좋은 환경은 아님. A post shared by #kendo #검도 #strength (@dochaebi) on Dec 23, 2018 at 4:04pm PST</summary></entry><entry><title type="html">2018-12-20 Workout Log: kendo</title><link href="https://shlrur.github.io//workout/2018/12/20/workout-log-kendo/" rel="alternate" type="text/html" title="2018-12-20 Workout Log: kendo" /><published>2018-12-20T00:00:00+00:00</published><updated>2018-12-20T00:00:00+00:00</updated><id>https://shlrur.github.io//workout/2018/12/20/workout-log-kendo</id><content type="html" xml:base="https://shlrur.github.io//workout/2018/12/20/workout-log-kendo/">&lt;blockquote class=&quot;instagram-media&quot; data-instgrm-captioned=&quot;&quot; data-instgrm-permalink=&quot;https://www.instagram.com/p/BrnCVeMgO4c/?utm_source=ig_embed&amp;amp;utm_medium=loading&quot; data-instgrm-version=&quot;12&quot; style=&quot; background:#FFF; border:0; border-radius:3px; box-shadow:0 0 1px 0 rgba(0,0,0,0.5),0 1px 10px 0 rgba(0,0,0,0.15); margin: 1px; max-width:658px; min-width:326px; padding:0; width:99.375%; width:-webkit-calc(100% - 2px); width:calc(100% - 2px);&quot;&gt;&lt;div style=&quot;padding:16px;&quot;&gt; &lt;a href=&quot;https://www.instagram.com/p/BrnCVeMgO4c/?utm_source=ig_embed&amp;amp;utm_medium=loading&quot; style=&quot; background:#FFFFFF; line-height:0; padding:0 0; text-align:center; text-decoration:none; width:100%;&quot; target=&quot;_blank&quot;&gt; &lt;div style=&quot; display: flex; flex-direction: row; align-items: center;&quot;&gt; &lt;div style=&quot;background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 40px; margin-right: 14px; width: 40px;&quot;&gt;&lt;/div&gt; &lt;div style=&quot;display: flex; flex-direction: column; flex-grow: 1; justify-content: center;&quot;&gt; &lt;div style=&quot; background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 100px;&quot;&gt;&lt;/div&gt; &lt;div style=&quot; background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 60px;&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;padding: 19% 0;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;display:block; height:50px; margin:0 auto 12px; width:50px;&quot;&gt;&lt;svg width=&quot;50px&quot; height=&quot;50px&quot; viewBox=&quot;0 0 60 60&quot; version=&quot;1.1&quot; xmlns=&quot;https://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;https://www.w3.org/1999/xlink&quot;&gt;&lt;g stroke=&quot;none&quot; stroke-width=&quot;1&quot; fill=&quot;none&quot; fill-rule=&quot;evenodd&quot;&gt;&lt;g transform=&quot;translate(-511.000000, -20.000000)&quot; fill=&quot;#000000&quot;&gt;&lt;g&gt;&lt;path d=&quot;M556.869,30.41 C554.814,30.41 553.148,32.076 553.148,34.131 C553.148,36.186 554.814,37.852 556.869,37.852 C558.924,37.852 560.59,36.186 560.59,34.131 C560.59,32.076 558.924,30.41 556.869,30.41 M541,60.657 C535.114,60.657 530.342,55.887 530.342,50 C530.342,44.114 535.114,39.342 541,39.342 C546.887,39.342 551.658,44.114 551.658,50 C551.658,55.887 546.887,60.657 541,60.657 M541,33.886 C532.1,33.886 524.886,41.1 524.886,50 C524.886,58.899 532.1,66.113 541,66.113 C549.9,66.113 557.115,58.899 557.115,50 C557.115,41.1 549.9,33.886 541,33.886 M565.378,62.101 C565.244,65.022 564.756,66.606 564.346,67.663 C563.803,69.06 563.154,70.057 562.106,71.106 C561.058,72.155 560.06,72.803 558.662,73.347 C557.607,73.757 556.021,74.244 553.102,74.378 C549.944,74.521 548.997,74.552 541,74.552 C533.003,74.552 532.056,74.521 528.898,74.378 C525.979,74.244 524.393,73.757 523.338,73.347 C521.94,72.803 520.942,72.155 519.894,71.106 C518.846,70.057 518.197,69.06 517.654,67.663 C517.244,66.606 516.755,65.022 516.623,62.101 C516.479,58.943 516.448,57.996 516.448,50 C516.448,42.003 516.479,41.056 516.623,37.899 C516.755,34.978 517.244,33.391 517.654,32.338 C518.197,30.938 518.846,29.942 519.894,28.894 C520.942,27.846 521.94,27.196 523.338,26.654 C524.393,26.244 525.979,25.756 528.898,25.623 C532.057,25.479 533.004,25.448 541,25.448 C548.997,25.448 549.943,25.479 553.102,25.623 C556.021,25.756 557.607,26.244 558.662,26.654 C560.06,27.196 561.058,27.846 562.106,28.894 C563.154,29.942 563.803,30.938 564.346,32.338 C564.756,33.391 565.244,34.978 565.378,37.899 C565.522,41.056 565.552,42.003 565.552,50 C565.552,57.996 565.522,58.943 565.378,62.101 M570.82,37.631 C570.674,34.438 570.167,32.258 569.425,30.349 C568.659,28.377 567.633,26.702 565.965,25.035 C564.297,23.368 562.623,22.342 560.652,21.575 C558.743,20.834 556.562,20.326 553.369,20.18 C550.169,20.033 549.148,20 541,20 C532.853,20 531.831,20.033 528.631,20.18 C525.438,20.326 523.257,20.834 521.349,21.575 C519.376,22.342 517.703,23.368 516.035,25.035 C514.368,26.702 513.342,28.377 512.574,30.349 C511.834,32.258 511.326,34.438 511.181,37.631 C511.035,40.831 511,41.851 511,50 C511,58.147 511.035,59.17 511.181,62.369 C511.326,65.562 511.834,67.743 512.574,69.651 C513.342,71.625 514.368,73.296 516.035,74.965 C517.703,76.634 519.376,77.658 521.349,78.425 C523.257,79.167 525.438,79.673 528.631,79.82 C531.831,79.965 532.853,80.001 541,80.001 C549.148,80.001 550.169,79.965 553.369,79.82 C556.562,79.673 558.743,79.167 560.652,78.425 C562.623,77.658 564.297,76.634 565.965,74.965 C567.633,73.296 568.659,71.625 569.425,69.651 C570.167,67.743 570.674,65.562 570.82,62.369 C570.966,59.17 571,58.147 571,50 C571,41.851 570.966,40.831 570.82,37.631&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div style=&quot;padding-top: 8px;&quot;&gt; &lt;div style=&quot; color:#3897f0; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:550; line-height:18px;&quot;&gt; View this post on Instagram&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;padding: 12.5% 0;&quot;&gt;&lt;/div&gt; &lt;div style=&quot;display: flex; flex-direction: row; margin-bottom: 14px; align-items: center;&quot;&gt;&lt;div&gt; &lt;div style=&quot;background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(0px) translateY(7px);&quot;&gt;&lt;/div&gt; &lt;div style=&quot;background-color: #F4F4F4; height: 12.5px; transform: rotate(-45deg) translateX(3px) translateY(1px); width: 12.5px; flex-grow: 0; margin-right: 14px; margin-left: 2px;&quot;&gt;&lt;/div&gt; &lt;div style=&quot;background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(9px) translateY(-18px);&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;margin-left: 8px;&quot;&gt; &lt;div style=&quot; background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 20px; width: 20px;&quot;&gt;&lt;/div&gt; &lt;div style=&quot; width: 0; height: 0; border-top: 2px solid transparent; border-left: 6px solid #f4f4f4; border-bottom: 2px solid transparent; transform: translateX(16px) translateY(-4px) rotate(30deg)&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;margin-left: auto;&quot;&gt; &lt;div style=&quot; width: 0px; border-top: 8px solid #F4F4F4; border-right: 8px solid transparent; transform: translateY(16px);&quot;&gt;&lt;/div&gt; &lt;div style=&quot; background-color: #F4F4F4; flex-grow: 0; height: 12px; width: 16px; transform: translateY(-4px);&quot;&gt;&lt;/div&gt; &lt;div style=&quot; width: 0; height: 0; border-top: 8px solid #F4F4F4; border-left: 8px solid transparent; transform: translateY(-4px) translateX(8px);&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/a&gt; &lt;p style=&quot; margin:8px 0 0 0; padding:0 4px;&quot;&gt; &lt;a href=&quot;https://www.instagram.com/p/BrnCVeMgO4c/?utm_source=ig_embed&amp;amp;utm_medium=loading&quot; style=&quot; color:#000; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px; text-decoration:none; word-wrap:break-word;&quot; target=&quot;_blank&quot;&gt;#운동 #매일운동 #저녁운동 #dailyworkout - #kendo #검도 - #상격 몸나감이 너무 어렵다. 나도 쫀득쫀득한 발놀림을 갖고싶다.&lt;/a&gt;&lt;/p&gt; &lt;p style=&quot; color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; line-height:17px; margin-bottom:0; margin-top:8px; overflow:hidden; padding:8px 0 7px; text-align:center; text-overflow:ellipsis; white-space:nowrap;&quot;&gt;A post shared by &lt;a href=&quot;https://www.instagram.com/dochaebi/?utm_source=ig_embed&amp;amp;utm_medium=loading&quot; style=&quot; color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px;&quot; target=&quot;_blank&quot;&gt; #kendo #검도 #strength&lt;/a&gt; (@dochaebi) on &lt;time style=&quot; font-family:Arial,sans-serif; font-size:14px; line-height:17px;&quot; datetime=&quot;2018-12-20T12:59:34+00:00&quot;&gt;Dec 20, 2018 at 4:59am PST&lt;/time&gt;&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//www.instagram.com/embed.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;instgrm.Embeds.process()&lt;/script&gt;</content><author><name>Heekyum</name></author><category term="kendo" /><summary type="html">View this post on Instagram #운동 #매일운동 #저녁운동 #dailyworkout - #kendo #검도 - #상격 몸나감이 너무 어렵다. 나도 쫀득쫀득한 발놀림을 갖고싶다. A post shared by #kendo #검도 #strength (@dochaebi) on Dec 20, 2018 at 4:59am PST</summary></entry></feed>